
ODPS 基本概念及常用命令
=========================
开放数据处理服务(Open Data Processing Service，简称ODPS)是阿里巴巴自主研发的海量数据离线数据处理平台。主要服务于实时性要求相对不高的批量结构化数据的存储和计算，可以提供海量数据仓库的解决方案以及针对大数据的分析建模服务。

ODPS提供了数据上传下载通道，SQL及MapReduce等多种计算分析服务，并且提供了完善的安全解决方案，其包括的功能有:

* 数据通道：提供高并发的数据上传下载服务，:ref:`odps_tunnel` ；
* 计算及分析任务：:ref:`odps_sql` 及 :ref:`odps_open_mr`  ；
* SDK：提供给开发者的工具包，SDK的相关介绍请参考 :ref:`odps_sdk` ；
* 安全：ODPS提供了功能强大的安全服务，为用户的数据安全提供保护，详情请参考 :ref:`odps_security` ；

各个功能模型的描述请参考用手册的其他部分。如果想快速了解如何使用ODPS，请参考 :ref:`odps_pre_case_tunnel`

ODPS基本概念
----------------

.. _odps_common_project:

项目空间(Project)
~~~~~~~~~~~~~~~~~

在ODPS中，所有对象都是属于某个项目空间的。一个用户可以同时拥有多个项目空间的权限。通过安全授权，可以在一个项目空间中访问另一个项目空间中的对象，例如：:ref:`odps_common_table` ，:ref:`odps_common_resource` 等。

用户可以通过 :ref:`odps_common_use_project` 命令进入一个项目空间，例如：

.. code-block:: sql
  
  use my_project   -- 进入一个名为my_project的项目空间

.. note:: ODPS客户端并不支持注释功能，但在文档中为了方便读者阅读，使用"- -"作为注释。

命令此运行后，用户会进入一个名为my_project的项目空间，从而可以操作该项目空间下的对象，例如：:ref:`odps_common_table` ，:ref:`odps_common_resource` ，:ref:`odps_common_function` ，:ref:`odps_common_instance`  等，而不需要关心操作对象所在的项目空间。:ref:`odps_common_use_project` 是ODPS客户端提供的命令。在详细介绍这部分内容之前，文档会对这些命令做简短的介绍说明，具体说明请参考 :ref:`odps_command` 。


.. _odps_common_table:

表(Table)
~~~~~~~~~~

在ODPS中，所有的数据都被存储在表中。表中的列可以是ODPS支持的任意种数据类型(Bigint，Double，String，Boolean，Datetime)。ODPS中的各种不同类型计算任务的操作对象(输入、输出)都是表。用户可以创建表，删除表以及向表中导入数据。

为了提高处理效率，可以在创建表时指定表的分区(Partition)，即指定表内的某几个字段作为分区列。在大多数情况下，用户可以将分区类比为文件系统下的目录。ODPS将分区列的每个值作为一个分区(目录)。用户可以指定多级分区，即将表的多个字段作为表的分区，分区之间正如多级目录的关系。在使用数据时如果指定了需要访问的分区名称，则只会读取相应的分区，避免全表扫描，提高处理效率，降低费用。详细介绍请参见 :ref:`odps_sql_part_table` 中的介绍。

 
数据类型(Data Type)
~~~~~~~~~~~~~~~~~~~

ODPS表中的列必须是下列描述的任意一种类型，各种类型的描述及取值范围包括：

+----------+--------------------------------------------------+--------------------------------------------+
| 类型     | 描述                                             | 取值范围                                   |
+==========+==================================================+============================================+
| Bigint   | 8字节有符号整型。请不要使用整型的最小值          | -9223372036854775807 ~ 9223372036854775807 |
|          | (-9223372036854775808)，这是系统保留值。         |                                            |
+----------+--------------------------------------------------+--------------------------------------------+
| String   | 字符串，支持UTF-8编码。其他编码的字符行为未定义。|                                            |
|          | 单个String列最长允许2M字节。                     |                                            |
+----------+--------------------------------------------------+--------------------------------------------+
| Boolean  | 布尔型。                                         | True/False                                 |
+----------+--------------------------------------------------+--------------------------------------------+
| Double   | 8字节双精度浮点数。                              | -1.0 * 10^308 ~ 1.0 * 10^308               |
+----------+--------------------------------------------------+--------------------------------------------+
| Datetime | 日期类型。使用东八区时间作为系统标准时间。       | 0001-01-01 00:00:00 ~ 9999-12-31 23:59:59  |
+----------+--------------------------------------------------+--------------------------------------------+

.. note:: 各种数据类型均可以为NULL

.. _odps_common_resource:

资源(Resource)
~~~~~~~~~~~~~~~

资源(Resource)是ODPS的特有概念。用户如果想使用ODPS的 :ref:`odps_sql_udf` 或 :ref:`odps_open_mr`  功能需要依赖资源来完成，例如：

* ODPS SQL UDF: 用户在编写UDF后，需要将编译好的jar包上传到ODPS。运行这个UDF时，ODPS会自动下载这个jar包，获取用户代码，运行UDF，无需用户干预。上传jar包的过程就是在ODPS上创建资源的过程，这个jar是ODPS资源的一种。

* ODPS MapReduce: 用户编写MapReduce程序后，将编译好的jar包作为一种资源上传到ODPS。运行MapReduce作业时，MapReduce框架会自动下载这个jar资源，获取用户代码。

* 用户同样可以将文本文件以及ODPS中的表作为不同类型的资源上传到ODPS。用户可以在UDF及MapReduce的运行过程中读取、使用这些资源。ODPS提供了读取、使用资源的接口。详细示例请查看 :ref:`odps_mr_resource_set` 及 :ref:`odps_udtf_usage` 中的描述。需要注意的是，ODPS的 :ref:`odps_sql_udf` 或 :ref:`odps_open_mr` 对资源的读取有如下 :ref:`odps_mr_restriction` 。
  

ODPS资源的类型包括：

  * File类型；
  * Table类型：ODPS中的表；
  * Jar类型：编译好的Java Jar包；


.. note:: 有关资源的操作介绍请参阅 :ref:`odps_common_add_resource_cmd` 、 :ref:`odps_common_del_resource_cmd` 、 :ref:`odps_common_list_resource_cmd` 及 :ref:`odps_common_desc_resource_cmd` 。

.. _odps_common_function:

自定义函数(UDF)
~~~~~~~~~~~~~~~~

ODPS为用户提供了SQL计算功能，用户可以在ODPS SQL中使用系统的 :ref:`odps_sql_function` 完成一定的计算和计数功能。但当内建函数无法满足要求时，用户可以使用ODPS提供的Java编程接口开发自定义函数(User Defined Function，以下简称UDF)。:ref:`odps_sql_udf` 又可以进一步分为标量值函数和自定义表值函数两种。

用户在开发完成UDF代码后，需要将代码编译成jar包，并将此jar包以jar资源的形式上传到ODPS，最后在ODPS中注册此UDF。在使用UDF时，只需要在SQL中指明UDF的函数名及输入参数即可，使用方式与ODPS提供的内建函数相同。

.. note:: 有关UDF的操作请参考 :ref:`odps_common_create_func` ， :ref:`odps_common_del_func` 及 :ref:`odps_common_ls_func` 。

.. _odps_task:

任务(Task)
~~~~~~~~~~~~~~

任务(Task)是ODPS的基本计算单元。SQL及MapReduce功能都是通过任务(Task)完成的。

对于用户提交的大多数任务，特别是计算型任务，例如：SQL :ref:`odps_sql_dml` ，:ref:`odps_open_mr` 等，ODPS会对其进行解析，得出任务的执行计划。执行计划是由具有依赖关系的多个执行阶段(Stage)构成的。目前，执行计划逻辑上可以被看做一个有向图，图中的点是执行阶段，各个执行阶段的依赖关系是图的边。ODPS会依照图(执行计划)中的依赖关系执行各个阶段。在同一个执行阶段内，会有多个进程，也称之为Worker，共同完成该执行阶段的计算工作。同一个执行阶段的不同Worker只是处理的数据不同，执行逻辑完全相同。计算型任务在执行时，会被实例化，用户可以操作这个 :ref:`odps_common_instance` 的信息，例如：获取实例状态( :ref:`odps_common_status_ins` )，终止实例运行( :ref:`odps_common_kill_ins` )等。

另一方面，部分ODPS任务并不是计算型的任务，例如：SQL中的 :ref:`odps_sql_ddl` ，这些任务本质上仅需要读取、修改ODPS中的元数据信息。因此，这些任务无法被解析出执行计划。


.. note:: 在ODPS中，并不是所有的请求都会被转化为任务(Task)，例如：:ref:`odps_common_project` 、 :ref:`odps_common_resource` 、 :ref:`odps_sql_udf` 及 :ref:`odps_common_instance` 的操作就不需要通过ODPS的任务来完成

.. _odps_common_instance:

实例(Instance)
~~~~~~~~~~~~~~~

在ODPS中，部分 :ref:`odps_task` 在执行时会被实例化，以ODPS实例(下文简称实例或Instance)的形式存在。实例会经历运行(Running)及结束(Terminated)两个阶段。运行阶段的状态为Running(运行中)，而结束阶段的状态将会是Success(成功)，Failed(失败)或Canceled(被取消)。用户可以根据运行任务时ODPS给出的实例ID查询、改变任务的状态，例如：

.. code-block:: sql

 status <instance_id>          --查看某实例的状态
 kill <instance_id>            --停止某实例，将其状态设置为Canceled


安全(Security)
~~~~~~~~~~~~~~~~~
在ODPS中访问数据，运行作业都必须有相应的权限。关于安全内容的介绍请参考 :ref:`odps_security` 章节的内容。

.. _odps_command:

ODPS常用命令
-----------------

ODPS提供了对项目空间、表、资源及实例等对象的一系列操作。用户可以通过客户端命令及SDK操作这些的对象。为了帮助您快速了解ODPS，在本章节，我们将详细介绍如何通过客户端使用这些命令。

.. note:: 

 * 如果想了解如何安装、配置客户端，请参考 :ref:`odps_pre_case_tunnel` ；
 * 对于SDK的更多介绍请参考 :ref:`odps_sdk` ；

.. _odps_common_use_project:

Use Project
~~~~~~~~~~~~~~~

命令格式:

.. code-block:: sql

 use <project_name>

行为：
 - 进入指定项目空间。进入该空间后可以直接操作该项目空间下的所有对象。
 - 项目空间不存在或当前用户不在此项目空间中，异常返回；

示例：

.. code-block:: sql

 odps:my_project>use my_project   --my_project是用户有权限访问的一个project

.. Note:: 上面给出的是在客户端中运行此命令的示例。所有的ODPS命令关键字、项目空间名、表名、列名大小写不敏感。

                                                          
在命令运行后，用户可以直接访问该项目空间下的对象。例如，假设my_project项目空间下有表test_src，用户运行：

.. code-block:: sql

 odps:my_project>sql                              -- 进入SQL命令空间，只有在此空间下才能够直接运行SQL命令
 odps:sql:my_project>select * from test_src;

ODPS会自动搜索项目空间my_project下的表。如果存在此表，返回表中的数据，如果此表不存在，异常退出。如果用户在my_project下想要访问另一项目空间my_project2下的表test_src，则需要指定项目空间名：

.. code-block:: sql

 odps:my_project>sql    --进入客户端的sql shell，只有在这个shell下才能运行SQL语句
 odps:sql:my_project>select * from my_project2.test_src;
        
此时返回my_project2项目空间下的数据结果，而不是my_project下的test_src表数据。

ODPS没有提供创建及删除项目空间的命令。用户可以通过管理控制台达对各自的项目空间完成更多的配置及操作。

.. note:: ODPS的不同功能命令，如：SQL及安全命令，需要在各自的命令空间下才能直接运行。详情请参考客户端文档 :ref:`odps_console` 的介绍。

Create操作
~~~~~~~~~~~~~~~

ODPS客户端提供了Create命令来创建对象。

命令格式及帮助信息：

.. code-block:: sql

  odps:my_project> help create

  Usage: create [OBJECT_TYPE] [OPTIONS] [ARGS]
                OBJECT_TYPE includes: resource and function
  
  Global options:
      -p, --project [PROJECT]                  Specify PROJECT
      -c, --comment <COMMENTS>                 Specify comment messages
  
  Option for resource:
      -f, --force                              Force to create resource whether exist or not
  
  Available OBJECT_TYPE:
  
      resource jar <LOCAL_JAR_FILE> [RESOURCE_NAME]
      resource file <LOCAL_FILE> [RESOURCE_NAME]
      resource table <TABLE_NAME> [RESOURCE_NAME]
  
      function <NAME> <CLASS> <RESOURCES>
  
  Examples:
  
      Create resource:
          create resource jar local_jar_path/my_jar.jar
          create resource -f jar local_jar_path/my_jar.jar
          create resource jar local_jar_path/my_jar.jar my_jar_named.jar
          create resource table my_project2.my_table_2
          create resource table my_part_table(pt='1') my_part_res
          create resource file -p my_project local_file_path/my_file.txt my_file_name
  
      Create function:
          create function my_func com.aliyun.demo.Func my_jar.jar:my_jar2.jar
          create function -p my_project my_func com.aliyun.demo.Func my_jar.jar:my_jar2.jar

说明：
 - OBJECT_TYPE：Create命令仅支持 :ref:`odps_common_resource` 及 :ref:`odps_common_function` 的创建，不支持 :ref:`odps_common_project` 及 :ref:`odps_common_table` 的创建。如果想创建表，请参考 :ref:`odps_sql_create_table` 。ODPS在客户端及SDK中不提供创建项目空间的操作； 
 - OPTIONS：-p及-c选项对 :ref:`odps_common_resource` 及 :ref:`odps_common_function` 两种对象均有效，分别指定创建对象所属的项目空间及对该对象的描述信息。而-f选项仅对资源创建有效，若指定此选项，若存在同名资源，则覆盖原有的资源信息。

.. _odps_common_add_resource_cmd:

创建资源
#########

命令格式：

.. code-block:: sql

  create resource jar <LOCAL_JAR_FILE> [RESOURCE_NAME]
  create resource file <LOCAL_FILE> [RESOURCE_NAME]
  create resource table <TABLE_NAME[(PARTITION_SPEC)]> [RESOURCE_NAME]

  Option for resource:
      -f, --force                              Force to create resource whether exist or not


说明：
  * TYPE：资源类型。ODPS目前仅支持JAR、FILE及TABLE三种类型的资源。资源类型的介绍请参考 :ref:`odps_common_resource` ；
  * LOCAL_JAR_FILE|LOCAL_FILE：本地文件所在路径；
  * TABLE_NAME：ODPS中的表名；
  * [(PARTITION_SPEC)]：当添加的资源为分区表时，ODPS仅支持将某个分区作为资源，不支持将整张分区表作为资源。(PARTITION_SPEC)参数形式如：(pt='3',ds='3')，其中pt及ds表示分区列；
  * RESOURCE_NAME：资源名，资源在ODPS中的唯一标识。若不指定RESOURCE_NAME，以文件名作为资源名；
  * -f：如果已经存在同名的资源，可以使用-f选项将其覆盖；

命令示例：

.. code-block:: sql

  create resource jar my_jar.jar
  create resource jar -f my_jar.jar
  create resource jar my_jar.jar my_jar_named.jar
  create resource table my_project2.my_table_2
  create resource table my_part_table(pt='1') my_part_res
  create resource file -p my_project my_file.txt my_file_name

.. note::  目前，每个资源文件的大小不能超过64M，单个SQL或MapReduce任务所引用的资源总大小不能超过512M。

.. _odps_common_create_func:

创建函数
#########

命令格式：

.. code-block:: sql

  create function <NAME> <CLASS> <RESOURCES> 


说明：
 - NAME：UDF函数名，这个名字就是SQL中引用该函数所使用的名字。
 - CLASS：这个参数就是从Java顶层包名一直到实现UDF类名的有效名称。
 - RESOURCES：UDF所用到的资源列表，这个里面必须包括UDF代码所在的资源。如果用户UDF中需要读取其他资源文件，这个列表中还得包括UDF所读取的资源文件列表。资源列表由多个资源名组成，资源名之间由冒号":"分隔。

.. note::

 * 同名函数只能注册一次。
 * 一般情况下用户自建函数无法覆盖同名的 :ref:`odps_sql_function` 。只有项目空间的Owner才有权利覆盖内建函数。

命令示例：

.. code-block:: sql

    create function my_func com.aliyun.demo.Func my_jar.jar:my_jar2.jar
    create function -p my_project my_func com.aliyun.demo.Func my_jar.jar:my_jar2.jar

假设Java UDF类org.alidata.odps.udf.examples.Lower在my_lower.jar中，创建函数my_lower：

.. code-block:: sql

  create function test_lower org.alidata.odps.udf.examples.Lower my_lower.jar


.. _odps_common_del_cmd:

Delete操作
~~~~~~~~~~~~~~~~~

用来删除项目空间中的对象。

命令格式及帮助信息：

.. code-block:: sql

  odps:my_project> help del
  Usage: del [OBJECT_TYPE] [OPTION] [ARGS]
                OBJECT_TYPE includes: resource and function
  
  OPTION:
      -p, --project [PROJECT]                  Specify PROJECT
  
  Available OBJECT_TYPE:
  
      resource <RESOURCE_NAME>
  
      function <FUNCTION_NAME>
  
  Examples:
  
      Delete resource:
          del resource my_jar.jar
          del resource -p my_project my_jar.jar
  
      Delete function:
          del function my_func
          del function -p my_project my_func


说明：
  * OBJECT_TYPE：Del命令仅支持 :ref:`odps_common_resource` 及 :ref:`odps_common_function` 的删除，不支持 :ref:`odps_common_project` 及 :ref:`odps_common_table` 的删除操作。如果想删除表，请参考 :ref:`odps_sql_drop_table` 。ODPS在客户端及SDK中不提供删除项目空间的操作；
  * OPTION：-p选项对资源、函数两种对象均有效，用于指定删除对象所属的项目空间。
 
.. _odps_common_del_resource_cmd:
 
删除资源
########

命令格式：

.. code-block:: sql

 del resource <RESOURCE_NAME>

说明：
 * RESOURCE_NAME：资源名

命令示例：

.. code-block:: sql

    del resource my_jar.jar
    del resource -p my_project my_jar.jar
 
.. _odps_common_del_func: 

删除函数
########

命令格式：

.. code-block:: sql

 del function <FUNCTION_NAME>

说明：
 * FUNCTION_NAME：函数名

命令示例：

.. code-block:: sql

    del function my_func
    del function -p my_project my_func

List操作
~~~~~~~~~~~~

命令格式及帮助信息：

.. code-block:: sql

  Usage: ls <OBJECTS_TYPE> [OPTIONS] [ARGS]
            OBJECTS_TYPE includes: tables, partitions, resources, functions and instances
  
  Global option:
      -p, --project [PROJECT]                  List objects in the specified PROJECT
  
  Options for instances:
      --start=<START_TIME>                     yyyyMMddHHmm
      --end=<END_TIME>                         yyyyMMddHHmm
      --limit=<NUM>
  
  Option for tables:
      --prefix <NAME_PREFIX>                   Specify a name prefix for filtering objects
  
  Examples:
  
      List tables:
          ls tables
          ls tables -p my_project
          ls tables --prefix my_table_prefix
  
      List partitions:
          ls partitions my_table
          ls partitions my_project.my_table
          ls partitions -p my_project my_table
          ls partitions my_table(pt='2014',ds='03')
  
      List resources:
          ls resources
          ls resources -p my_project
  
      List functions:
          ls functions
          ls functions -p my_project
  
      List instances:
          ls instances
          ls instances -p my_project
          ls instances --start=201403050000 --end=201403050000
          ls instances --limit 100
   

说明：
  * 支持的OBJECTS_TYPE包括：表(tables)、资源(resources)、函数(functions)及实例(instances)；
  * -p选项用来指定所要查看的项目空间，若不指定，则查看当前项目空间内的对象；

查看表清单
#################

命令示例：

.. code-block:: sql

    ls tables                             --查看当前项目空间中的所有表
    ls tables -p my_project               --查看指定项目空间my_project下的所有表
    ls tables --prefix my_table_prefix    --查看以my_table_prefix为前缀的表

说明：
 * --prefix选项，指定所要查看的表的前缀，不符合此要求的表名将被过滤；

客户端输出示例：

.. code-block:: sql

  odps:my_project> list tables
  Name                                    Owner
  -------------------------------------------------------------------------------
  my_table                                ALIYUN$test_user@aliyun.com 
  my_table2                               ALIYUN$test_user@aliyun.com 
  ....

显示的内容包包括：
 * Name：资源名称；
 * Owner：表的创建者；
 * ALIYUN是系统提示符，表示用户是阿里云用户;

.. _odps_common_list_resource_cmd:

查看资源清单
###############

命令示例：

.. code-block:: sql

    ls resources                  --查看当前项目空间中的所有的资源
    ls resources -p my_project    --查看指定项目空间my_project下的所有资源


客户端输出示例：

.. code-block:: sql

  odps:my_project> list resources 
  Name               Owner                          Type      Comment 
  ---------------------------------------------------------------------
  my_jar.jar         ALIYUN$user_test@aliyun.com    JAR 
  my_table_2         ALIYUN$user_test@aliyun.com    TABLE
  my_file_name       ALIYUN$user_test@aliyun.com    FILE 
  ...


显示的内容包括：
 * Name：资源名称；
 * Owner：资源的创建者；
 * Type：资源类型，相关介绍请参考 :ref:`odps_common_resource` ；
 * Comment：创建资源时指定的对该资源的描述信息；

.. _odps_common_ls_func:

查看函数清单
###############

命令示例：

.. code-block:: sql

    ls functions                  --查看当前项目空间中的所有的自定义函数
    ls functions -p my_project    --查看指定项目空间my_project下的所有自定义函数


客户端输出示例：

.. code-block:: sql

  odps:my_project> list functions 
  Name         Owner                          ClassType & Resources 
  --------------------------------------------------------------------------------------------------------------------
  test_lower   ALIYUN$test_user@aliyun.com    org.alidata.odps.udf.examples.Lower [my_project/resources/my_lower.jar]
  ....

显示的内容包括：
 * Name：资源名称；
 * Owner：资源的创建者；
 * ClassType & Resources：创建函数时指定的类名及资源名称；

查看实例清单
###############

命令示例：

.. code-block:: sql

  ls instances                                          --查看当前项目空间中的当天的实例信息
  ls instances -p my_project                            --查看指定项目空间my_project下，当天的实例信息
  ls instances --start=201403050000 --end=201403090000  --查看从2014年3月5日到2014年3月9日的实例信息
  ls instances --limit 100                              --查看按时间排序，最后100个实例信息


客户端输出示例：

查看从2014年3月30日0点0分到2014年3月30日14点0分，按时间排序，最近5个实例信息。

.. code-block:: sql

  odps:odps_test_mrtask> ls instances --limit 5 --start=201403300000 --end=201403301400
  InstanceId                  Elapsed   Status        StartTime           EndTime 
  --------------------------------------------------------------------------------------------
  20140329220801554g7go02ma   0s        Terminated    2014-03-30 06:08:01 2014-03-30 06:08:01
  20140329220801750g8go02ma   1s        Terminated    2014-03-30 06:08:01 2014-03-30 06:08:02
  20140329220801779g9go02ma   1s        Terminated    2014-03-30 06:08:01 2014-03-30 06:08:02
  2014032922080218ghbj12ma    0s        Terminated    2014-03-30 06:08:02 2014-03-30 06:08:02
  20140329220802245gago02ma   0s        Terminated    2014-03-30 06:08:02 2014-03-30 06:08:02
  
  Total 5, [2014-03-30 00:00:00,2014-03-30 14:00:00], limit: 5 


显示的内容包括：
 * InstanceId：实例ID，每个实例的唯一标识；
 * Elapsed：每个实例的消耗时间；
 * Status：实例的状态，详情请参考 :ref:`odps_common_instance` ；
 * StartTime：实例开始运行的时间，如果不指定仅能查看当天的实例信息；
 * EndTime：实例结束时间；


Describe操作
~~~~~~~~~~~~~~~
ODPS客户端提供Desc命令帮助用户查看对象信息

命令格式及帮助信息：

.. code-block:: sql

    odps:my_project> help desc
    Usage: desc [OBJECT_TYPE] [OPTION] [ARGS]
            OBJECT_TYPE includes: project, table, partition and resource

    OPTION:
        -p, --project [PROJECT]                  Specify PROJECT
    
    
    Examples:
    
        Describe project:
            desc project my_project
    
        Describe table:
            desc table my_table
            desc table my_project.my_table
    
        Describe partition:
            desc table my_table(pt='2014',ds='03')
            desc table my_project.my_table(pt='2014',ds='03')
            desc table -p my_project my_table(pt='2014',ds='03')
    
        Describe resource:
            desc resource my_resource
            desc resource -p my_project my_resource
    

说明：

* OBJECT_TYPE：指明需要查看的ODPS对象的类型。此命令仅支持 :ref:`odps_common_project` 、:ref:`odps_common_table` 、:ref:`odps_common_resource` 及 :ref:`odps_common_function` 类型的对象；
* OPTIONS：目前仅支持-p选项，指定查看某个项目空间下的对象信息；


查看项目空间信息
###################

命令示例：

.. code-block:: sql
  
    desc project my_project

运行结果：

.. code-block:: sql

 odps:my_project> desc project my_project 
 Name                                    my_project
 Description                             project for test 
 Owner                                   ALIYUN$test_user@aliyun.com
 CreatedTime                             Wed Jun 26 17:01:35 CST 2013
 
 Properties:
 WHITE_LIST                              []

 
 Security:
 Protected                               false
 CheckPermissionUsingACL                 true
 CheckPermissionUsingPolicy              true
 LabelSecurity                           false
 ObjectCreatorHasAccessPermission        true
 ObjectCreatorHasGrantPermission         true

此时OBJECT_TYPE为project，意味着Describe命令描述的对象my_project是项目空间。当OBJECT_TYPE为project时，-p选项依然有效，只是二者不能有冲突，否则报错，例如：

.. code-block:: sql

  odps:my_project> desc project my_project -p my_project2 
  ERROR: Conflicting argument.

.. _odps_common_desc_table_cmd:

查看表信息
###################
命令示例：

.. code-block:: sql

    desc table my_table
    desc table my_project.my_table
    desc table -p my_project my_table

输出示例：

.. code-block:: sql

  odps:my_project> desc table sale_detail 

  +------------------------------------------------------------------------------------+
  | Table: sale_detail                                                                 |
  | Owner: ALIYUN$test_user@aliyun.com | Project: my_project                           |
  | TableComment:                                                                      |
  +------------------------------------------------------------------------------------+
  | CreateTime:               2014-01-21 04:06:38                                      |
  | LastMetaModifiedTime:     2014-01-21 04:06:38                                      |
  | LastDataModifiedTime:     2014-01-21 04:13:08                                      |
  +------------------------------------------------------------------------------------+
  | Type: Table                  | Size: 0                                             |
  +------------------------------------------------------------------------------------+
  | Native Columns:                                                                    |
  +------------------------------------------------------------------------------------+
  | Field           | Type       | Comment                                             |
  +------------------------------------------------------------------------------------+
  | shop_name       | string     |                                                     |
  | customer_id     | string     |                                                     |
  | total_price     | double     |                                                     |
  +------------------------------------------------------------------------------------+
  | Partition Columns:                                                                 |
  +------------------------------------------------------------------------------------+
  | sale_date       | string     |                                                     |
  | region          | string     |                                                     |
  +------------------------------------------------------------------------------------+

输出信息包括：Table(表的名称)、Owner(表的创建者)、Project(表所属的项目空间)、TableComment(表的描述信息)、CreateTime(创建时间)、LastMetaModifiedTime(表的原信息最后一次被修改的时间)、LastDataModifiedTime(表中的数据最后一次被改动的时间)、Type(表的类型，Table或View)、Size(表数据所占存储容量的大小，单位Byte)、Native Columns(非分区列的信息，包括：列名，类型，备注)及Partition Columns(分区列信息，包括：分区名，类型，备注)。

.. note::

 * 如果是不带分区的表，将不会显示Partition Columns相关信息；
 * 如果描述的是一个视图(View)，将不显示Size选项，而是ViewText选项，表示View的定义，例如：select * from src。关于视图的介绍请参考 :ref:`odps_sql_create_view` ；


.. _odps_common_desc_partition_cmd:

查看表分区信息
###################

命令示例：

.. code-block:: sql

    desc table my_part_table(pt='2014',ds='03')
    desc table my_project.my_part_table(pt='2014',ds='03')
    desc table -p my_project my_table(pt='2014',ds='03')


.. _odps_common_desc_resource_cmd:

查看资源信息
#################

命令示例：

.. code-block:: sql

    desc resource my_resource
    desc resource -p my_project my_resource 

客户端输出示例：

.. code-block:: sql

  odps:my_project> desc resource my_jar.jar
  Name                                    my_jar.jar
  Owner                                   ALIYUN$test_user@aliyun.com
  Type                                    JAR
  Comment
  CreatedTime                             Mon Sep 16 12:10:54 CST 2013
  LastModifiedTime                        Sun Mar 30 06:08:26 CST 2014


显示项说明：
 * Name：资源名；
 * Owner：资源创建者；
 * Type：资源类型，详情请参考 :ref:`odps_common_resource` ；
 * Comment：资源描述；
 * CreatedTime：被创建的时间；
 * LastModifiedTime：最近一次被修改的时间，即最近一次使用被重新覆盖的时间，相关命令请参考 :ref:`odps_common_add_resource_cmd` ；

其他实例相关操作
~~~~~~~~~~~~~~~~

.. _odps_common_status_ins:

Status Instance
####################

命令格式：

.. code-block:: sql
 
 status <instance_id>;

描述：
 - instance_id: 实例的唯一标识符。指定查询哪个实例状态。



示例：

.. code-block:: sql 

  odps:my_project> status 20140327234656595ggdz8k4y2
  InstanceID           20140327234656595ggdz8k4y2
  Owner                ALIYUN$user_test@aliyun.com
  StartTime            Fri Mar 28 07:46:55 CST 2014
  EndTime              Fri Mar 28 07:47:32 CST 2014
  Status               SUCCESS
  
查看ID为20140327234656595ggdz8k4y2的实例的状态，查询结果为Success。

输出项说明：
 - 返回指定实例的ID(InstanceID)，创建者(Owner)，开始时间(StartTime)，结束时间(EndTime)，状态(Status)。

.. _odps_common_kill_ins:

Kill Instance
#####################

命令格式:

.. code-block:: sql

   kill <instance_id>

行为：
 - 停止用户指定的实例，此实例的状态必须为Running；

参数：
 - instance_id：实例的唯一标识符。必须是状态为Running的实例的ID，否则抛异常；

示例：

.. code-block:: sql

 odps:my_project>kill 20131225123302267gk3u6k4y2;

停止ID为20131225123302267gk3u6k4y2的实例。

Attach Instance
#####################

命令格式:

.. code-block:: sql

   attach <instance_id>

行为：
 - 查看正在运行的实例的当前详细运行信息。 

参数：
 - instance_id：实例的唯一标识符。必须是状态为Running的实例的ID，否则无任何输出信息；

示例：

.. code-block:: sql

 odps:my_project>attach 20131225123302267gk3u6k4y2;



.. _odps_pre_log:

Log 
~~~~~~~~~

ODPS的所有任务都是在分布式环境下运行的。通过Log命令，用户可以查看任务中每个进程(Worker)的状态，命令格式：

.. code-block:: sql
  
   log <action> [OPTIONS]

其中action包括：get，help及list。每个action的功能可以通过help action查看，例如查看list action的功能：

.. code-block:: sql

 odps:my_project>log help list;
 Usage: log list [OPTIONS] <INSTANCE_ID>
 OPTIONS:
 -d,--duration      sort by duration
 -F,--failed        only print failed workers
 -l,--limit <arg>   maximum printed worker number
 -r,--reverse       reverse the sort order of results
 -R,--running       only print running workers
 

说明：

  * -d：依据执行SQL任务的每个进程的执行时间长短而排序；
  * -F：只显示失败的进程(Worker)；
  * -l：显示进程的最大数量；
  * -r：反向排序，目前必须与-d选项配合使用；
  * -R：只显示运行中的进程；

下面给出使用log命令的示例：

1. 假设存在表，运行如下SQL：

.. code-block:: sql

  select cast(sale_date as datetime) from sale_detail;
     -- 这是一个会在运行时报错的ODPS SQL，失败原因会在后续章节中涉及。
     -- 在这里，用户可以先不必关心失败的原因。

得到如下格式输出：

.. code-block:: sql

 odps:sql:my_project>select cast(sale_date as datetime) from sale_detail;
 
 ID = 20140116065603291go4musna
 ...
 FAILED: ODPS-0121095:Invalid arguments - in function cast, string datetime's 
  format must be yyyy-mm-dd hh:mi:ss,  input string is:201310, 
  column hint is 'sale_detail.sale_date'
 
2. 查看这个SQL的每个进程的状态：

.. code-block:: sql

  odps:my_project>log list 20140116065603291go4musna;
  M1_Stg1#0_0         1970-01-01 08:00:00      0s         Failed


如果您对SQL的分布式实现方式不够了解，可以忽略第一项"M1_Stg1#0_0"展示的意义，但请注意这个字段能够唯一标识SQL执行过程中的每个进程。这一项表示了ODPS SQL的执行逻辑，不在本章的介绍范围内。第二列表示每个进程启动的时间。第三项表示每个进程工作的时间(由于示例中处理的数据量很少，只有两行数据，因此执行时间不足1秒)。最后一列Failed表示进程的状态为失败。

3. 查看进程的stdout和stderr：

.. code-block:: sql
  
 odps:my_project>log get 20140116065603291go4musna M1_Stg1#0_0 -type stderr;
 agrv 0  = cgcreate
 agrv 1  = -a
 agrv 2  = admin
 agrv 3  = -g
 agrv 4  = memory
 
 odps@ odps_test_smode>log get 20140116065603291go4musna M1_Stg1#0_0 -type stdout;
 LimitKey:core
 SetLimit - core:unlimited
 [2014-01-16 14:56:45.456484] ---------- Run Task: M1_Stg1#0 ----------
 

在这个示例中，从stdout和stderr处无法看到有帮助的出错信息。但在某些时候，stdout和stderr的信息可以帮助用户调查问题。我们建议有分布式经验的用户使用此功能。

.. note:: Log的功能十分强大，在示例中我们我们仅仅展示了最基础的使用场景。请用户可以通过log help获取更加详细的使用说明。
 
.. _odps_pre_case_tunnel:

快速开始
--------

ODPS的各项功能都可以通过客户端来访问，以下是一个使用客户端运行ODPS处理数据的快速示例。

首先下载ODPS客户端，解压到一个文件夹中。由于客户端是用Java开发的，因此要确保机器上有JRE 1.6。在解压的文件夹中可以看到如下3个文件夹：

.. code-block:: sql

  bin/  conf/  lib/

在conf文件夹中有odps.conf文件。编辑此文件，填写相关信息：

.. code-block:: sql

 access.id=*******************
 access.key=*********************
     #这两项是由云账号提供的，在阿里云官网上可以获取
 default.project=my_project
     #指定您想进入的项目空间。此项可忽略，缺省时进入客户端后需要使用"use <project_name>"命令进入您的项目空间。
 endpoint=http://service.odps.aliyun.com/api
     #odps公网服务地址

.. note:: 关于客户端的详细介绍请参考 :ref:`odps_console` 。


修改好配置文件后运行bin目录下的odps(在Linux系统下是./bin/odps，Windows下运行./bin/odps.bat)，现在可以运行几个SQL。

.. code-block:: sql

 sql  -- 进入sql shell。只有进入sql shell，才能运行sql 语句。
 create table tbl1(id bigint);
 insert overwrite table tbl1 select count(*) from tbl1;
 select 'welcome to odps!' from tbl1;

ODPS同样提供了上传下载数据的方式，下面我们将给出这样一个示例：

创建销售表sale_detail：

.. code-block:: sql

  create table if not exists sale_detail(
      shop_name     string,
      customer_id   string,
      total_price   double)
  partitioned by (sale_date string,region string);

此表是一张分区表，详细介绍请参阅 :ref:`odps_sql_create_table` 。向表中添加杭州和上海两地区2013年10月和11月份的分区：

.. code-block:: sql

  alter table sale_detail add partition (sale_date='201310', region='hangzhou');
  alter table sale_detail add partition (sale_date='201311', region='hangzhou');
  alter table sale_detail add partition (sale_date='201310', region='shanghai');
  alter table sale_detail add partition (sale_date='201311', region='shanghai');

添加分区的介绍请参阅 :ref:`odps_sql_add_partition` 。准备这4个分区的数据：杭州市2013年10月销售记录：


.. code-block:: sql

  shop1,1,100
  shop2,2,200

杭州市2013年11月销售记录：

.. code-block:: sql

  shop3,3,300
  shop4,4,400

上海市2013年10月销售记录：

.. code-block:: sql

  shop5,5,500
  shop6,6,600

上海市2013年11月销售记录：

.. code-block:: sql

  shop7,7,700
  shop8,8,800


将这4份数据保存到4分本地文件中：hangzhou_10.txt，hangzhou_11.txt，shanghai_10.txt，shanghai_11.txt。分别将其上传至ODPS的表中。ODPS为用户提供了数据上传及下载的工具。用户可以从阿里云官网上下载这个工具，解压此文件，会看到如下目录及文件：

::
  
  config.ini  dship  dship.bat  lib/ 

其中，dship是Linux系统下的可执行文件，dship.bat是Windows下的可执行文件，lib是工具依赖的库文件路径，config.ini是配置文件。编辑config.ini，填写相关信息：

::

  tunnel-endpoint=<Tunnel服务的地址，请注意公网服务与内网服务的区别>
    #Tunnel服务内网地址：http://dt-ext.odps.aliyun-inc.com
    #Tunnel服务公网地址：http://dt.odps.aliyun.com
  id=<阿里云账号相关信息>
  key=<阿里云账号相关信息>
  project=<默认项目空间名称，配置此项后不必特殊指定数据导入、导出表所在的项目空间>

将数据文件导入ODPS：

::

    ./dship upload hangzhou_10.txt sale_detail/sale_date='201310',region='hangzhou'
    ./dship upload hangzhou_11.txt sale_detail/sale_date='201311',region='hangzhou'
    ./dship upload shanghai_10.txt sale_detail/sale_date='201310',region='shanghai'
    ./dship upload shanghai_11.txt sale_detail/sale_date='201311',region='shanghai'

.. note:: 关于dship工具的详细说明请参考 :ref:`odps_dship` 。

验证数据：

.. code-block:: sql

  select * from sale_detail;

