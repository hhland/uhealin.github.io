.. _odps_openmr_jar:

MapReduce命令介绍
==================

Jar命令介绍
------------------
ODPS客户端提供一个jar命令用于运行MapReduce作业，具体语法：

::

  Usage: jar [<GENERIC_OPTIONS>] <MAIN_CLASS> [ARGS]
      -conf <configuration_file>         Specify an application configuration file
      -classpath <local_file_list>       classpaths used to run mainClass
      -D <name>=<value>                  Property value pair, which will be used to run mainClass
      -local                             Run job in local mode
      -resources <resource_name_list>    file/table resources used in mapper or reducer, seperate by comma
  


其中<GENERIC_OPTIONS>包括(均为可选参数)：

 * -conf <configuration file> ：指定JobConf配置文件；
 * -classpath <local_file_list> : 本地执行时的classpath，主要用户指定main函数所在的jar包。大多数情况下，用户更习惯于将main函数与Map/Reduce函数编写在一个包中，例如：:ref:`odps_openmr_example_wordcount` ，因此，在执行示例程序时，-resources及-classpath的参数中都出现了mapreduce-examples.jar，但二者意义不同，-resources引用的是Map/Reduce函数，运行于分布式环境中，而-classpath引用的是main函数，运行于本地，指定的jar包路径也是本地文件路径。包名之间使用系统默认的文件分割符作分割(通常情况下，windows系统是分号";"，linux系统是冒号":")；
 * -D <prop_name>=<prop_value> : 本地执行时，<mainClass>的java属性，可以定义多个；
 * -local：以本地模式执行MapReduce作业，主要用于程序调试；
 * -resources <resource_name_list>: MapReduce作业运行时使用的资源声明。一般情况下，resource_name_list中需要指定Map/Reduce函数所在的资源名称。如果用户在Map/Reduce函数中读取了其他ODPS资源，那么，这些资源名称也需要被添加到resource_name_list中。资源之间使用逗号分隔，使用跨项目空间使用资源时，需要前面加上：PROJECT/resources/，示例：-resources otherproject/resources/resfile。有关于如何在Map/Reduce函数中读取资源的示例请查看 :ref:`odps_mr_resource_set` ；

用户可以通过-conf选项指定JobConf配置文件。该文件可以影响SDK中JobConf的设置。关于JobConf的介绍请参考 :ref:`odps_mr_sdk_core` 及 SDK Java Doc的介绍。下面将给出一个JobConf配置文件的示例：

.. code-block:: xml

  <configuration>
     <property>
        <name>import.filename</name>
        <value>resource.txt</value>
     </property>
  </configuration>

在上述示例中，通过JobConf配置文件定义一个名为import.filename的变量，该变量的值为resource.txt。用户可以在MapReduce程序中通过JobConf接口获取该变量的值。用户通过SDK中JobConf接口可以达到相同的目的。具体使用方式可以参考 :ref:`odps_mr_resource_set` 。

示例：

::
 
 jar -resources mapreduce-examples.jar -classpath mapreduce-examples.jar 
     org.alidata.odps.mr.examples.WordCount wc_in wc_out
 
 create resource file data/src.txt
 jar -resources src.txt,mapreduce-examples.jar -classpath mapreduce-examples.jar 
     org.alidata.odps.mr.examples.WordCount wc_in wc_out
 
 create resource file data/a.txt
 create resource table wc_in as test_table
 create resource jar work.jar
 jar -conf odps-mapred.xml -resources a.txt,test_table,work.jar 
     -classpath work.jar:otherlib.jar 
     -D import.filename=resource.txt org.alidata.odps.mr.examples.WordCount args ...

.. _odps_mr_local:

本地运行MapReduce
------------------

用户通过在jar命令中设置- -local参数，在本地模拟MapReduce的运行过程，从而进行本地调试。本地运行时，客户端会从ODPS中下载本地调试所需要的输入表的元信息、数据，所需要的资源以及输出表的元信息，并将这些信息保存到一个名为warehouse的本地目录中。在程序运行结束后，会将计算结果输出到warehouse目录内的一个文件中。如果本地的warehouse目录下已经下载了输入表及被引用的资源，在下一次运行时，会直接引用warehouse下的数据及文件，而不会重复下载。

在本地运行过程中，仍然会启动多个Map及Reduce进程处理数据，但这些进程不是并发运行，而是依次串行运行。此外这个模拟运行过程与真正的分布式运行有如下差别：

* 输入表行数限制：目前，最多只会下载100行数据；
* 资源的使用：在分布式环境中，ODPS会限制引用资源的大小，详情请参考 :ref:`odps_mr_restriction` 。但在本地运行环境中，不会有资源大小的限制；
* 安全限制：ODPS MapReduce及UDF程序在分布式环境中运行时受到 :ref:`odps_sandbox` 的限制。但在本地运行时，则没有此限制； 

下面将给出一个简单的本地本地运行示例：

::

 odps:my_project> jar -local com.aliyun.odps.mapred.example.WordCount wc_in wc_out
 Summary:
 counters: 10
         map-reduce framework
                 combine_input_groups=2
                 combine_output_records=2
                 map_input_bytes=4
                 map_input_records=1
                 map_output_records=2
                 map_output_[wc_out]_bytes=0
                 map_output_[wc_out]_records=0
                 reduce_input_groups=2
                 reduce_output_[wc_out]_bytes=8
                 reduce_output_[wc_out]_records=2
 
 OK

.. note:: 关于WordCount示例的介绍请参考 :ref:`odps_openmr_example_wordcount` 。
 
如果用户是第一次运行本地调试命令，命令成功结束后，会在当前路径下看到一个名为warehouse的路径。warehouse的目录结构如下所示：

::

   warehouse
      |______my_project(项目空间目录)
                 |______wc_in(表数据目录)
                 |        |____ data(文件)
                 |        |____ __schema__ (文件)
                 |
                 |______wc_in(表数据目录)
                          |____ data(文件)
                          |____ __schema__ (文件)


my_project的同级目录表示项目空间。wc_in及wc_out表示数据表，用户在jar命令中读写的表文件数据会被下载到这级目录下。__schema__文件中的内容表示表的元信息，其文件格式定义为：

::

  local_project_name.local_table_name,col1_name:col1_type,col2_name:col2_type

其中，列名与列类型使用冒号":"分隔，列与列之间使用逗号","分隔。__schema__文件的最前面需要声明Project名字及Table名字，即project_name.table_name，使用逗号与列的定义做分隔。data文件表示表的数据。列的数量及数据必须与__schema__文件的定义相符，不能多列或者少列，列之间使用逗号分隔。


wc_in的__schema__文件内容：

::

  my_project.wc_in,key:STRING,value:STRING

data文件内容示例：
::
  
  0,2


客户端会从ODPS中下载表的元信息及部分数据内容并保存到上述两个文件中。如果再次运行这个示例，将直接使用wc_in目录下的数据，不会再次下载。需要特殊声明的是，从ODPS中下载数据的功能只在MapReduce的本地运行模式下才支持，在 :ref:`odps_tools_eclipse` 中进行本地调试时，不支持将ODPS的数据下载到本地。


wc_out的__schema__文件内容：

::

  my_project.wc_out,key:STRING,cnt:BIGINT


data文件内容：

::

  0,1
  2,1

客户端会从ODPS现在wc_out表的元信息，并保存到__schema__文件中。而data文件的内容是在本地运行后，生成的结果数据文件。


.. note:: 用户也可以自行编辑__schema__及data文件，而后将这两个文件放置在对应的表目录下。在本地运行时，客户端检测到表目录已经存在，则不会从ODPS中下载这个表的信息。本地的表目录可以是ODPS中不存在的表。
