源代码
----------------------------------------------------------------------------------------
代码示例，仅供参考：

.. code-block:: java
 :linenos:

  package com.aliyun.odps.mapred.open.example;
  
  import java.io.IOException;
  import java.util.Date;
  import com.aliyun.odps.data.Record;
  import com.aliyun.odps.data.TableInfo;
  import com.aliyun.odps.mapred.JobClient;
  import com.aliyun.odps.mapred.MapperBase;
  import com.aliyun.odps.mapred.TaskContext;
  import com.aliyun.odps.mapred.conf.JobConf;
  import com.aliyun.odps.mapred.example.lib.IdentityReducer;
  import com.aliyun.odps.mapred.utils.InputUtils;
  import com.aliyun.odps.mapred.utils.OutputUtils;
  import com.aliyun.odps.mapred.utils.SchemaUtils;
  
  /**
   * This is the trivial map/reduce program that does absolutely nothing other
   * than use the framework to fragment and sort the input values.
   * <p>
   * To run: jar -resources odps-mapred-example-0.12.0.jar com.aliyun.odps.mapred.open.example.Sort 
   * mr_sort_in mr_sort_out;
   * 
   **/
  public class Sort {
  
    static int printUsage() {
      System.out.println("sort <input> <output>");
      return -1;
    }
  
    /**
     * Implements the identity function, mapping record's first two columns to
     * outputs.
     **/
    public static class IdentityMapper extends MapperBase {
      private Record key;
      private Record value;
  
      @Override
      public void setup(TaskContext context) throws IOException {
        key = context.createMapOutputKeyRecord();
        value = context.createMapOutputValueRecord();
      }
  
      @Override
      public void map(long recordNum, Record record, TaskContext context)
          throws IOException {
        key.set(new Object[] { (Long) record.get(0) });
        value.set(new Object[] { (Long) record.get(1) });
        context.write(key, value);
      }
  
    }
  
    /**
     * The main driver for sort program. Invoke this method to submit the
     * map/reduce job.
     * 
     * @throws IOException
     *           When there is communication problems with the job tracker.
     **/
    public static void main(String[] args) throws Exception {
  
      JobConf jobConf = new JobConf();
  
      jobConf.setMapperClass(IdentityMapper.class);
      jobConf.setReducerClass(IdentityReducer.class);
  
      jobConf.setNumReduceTasks(1);
  
      jobConf.setMapOutputKeySchema(SchemaUtils.fromString("key:bigint"));
      jobConf.setMapOutputValueSchema(SchemaUtils.fromString("value:bigint"));
  
      InputUtils.addTable(TableInfo.builder().tableName(args[0]).build(), jobConf);
      OutputUtils.addTable(TableInfo.builder().tableName(args[1]).build(), jobConf);
  
      Date startTime = new Date();
      System.out.println("Job started: " + startTime);
      
      JobClient.runJob(jobConf);
      
      Date end_time = new Date();
      System.out.println("Job ended: " + end_time);
      System.out.println("The job took "
          + (end_time.getTime() - startTime.getTime()) / 1000 + " seconds.");
    }
  }
