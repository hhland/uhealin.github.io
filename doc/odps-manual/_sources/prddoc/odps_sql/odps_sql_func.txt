.. _odps_sql_function:

SQL内建函数
------------------

数学运算函数
~~~~~~~~~~~~~~~~~

.. _odps_sql_function_abs:

ABS
`````` 

函数定义：

.. code-block:: sql

 double abs(double number)
 bigint abs(bigint number) 

用途：返回绝对值。

参数说明：

 - number：Double或bigint类型，输入为bigint时返回bigint，输入为double时返回double类型。若输入为string类型会隐式转换到double类型后参与运算，其它类型抛异常。

返回值：Double或者bigint类型，取决于输入参数的类型。若输入为null，返回null。

.. note:: 当输入bigint类型的值超过bigint的最大表示范围时，会返回double类型，这种情况下可能会损失精度。

示例：

.. code-block:: sql

 abs(null) =  null
 abs(-1) = 1
 abs(-1.2) = 1.2
 abs("-2") = 2.0
 abs(122320837456298376592387456923748) = 1.2232083745629837e32    

下面是一个完整的abs函数在SQL中使用的例子，其他内建函数(除 :ref:`odps_sql_window` 、:ref:`odps_sql_aggr` 外)的使用方式与其类似，不再一一举例：

.. code-block:: sql

  select abs(id) from tbl1;
    -- 取tbl1表内id字段的绝对值

ACOS
```````
函数定义：

.. code-block:: sql

 double acos(double number)

用途：计算number的反余弦函数。

参数说明：
  - number：Double类型，-1≤number≤1。若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。

返回值：Double类型，值域在0 ~ π 之间。若number为NULL，返回NULL。

示例：

.. code-block:: sql

 acos("0.87") = 0.5155940062460905
 acos(0) = 1.5707963267948966

ASIN
````````
函数定义：

.. code-block:: sql

 double asin(double number)

用途：反正弦函数。

参数说明：
 - number：Double类型，-1≤number≤1。若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。

返回值：Double类型，值域在-π/2 ~π/2之间。若number为NULL，返回NULL。

示例：

.. code-block:: sql
 
 asin(1) = 1.5707963267948966
 asin(-1) = -1.5707963267948966


ATAN
````````
函数定义：

.. code-block:: sql

 double atan(double number)

用途：反正切函数。

参数说明：
  - number：Double类型，若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。

返回值：Double类型，值域在-π/2 ~π/2之间。若number为NULL，返回NULL。

示例：

.. code-block:: sql

 atan(1) = 0.7853981633974483
 atan(-1) = -0.7853981633974483

CEIL
````````
函数定义：

.. code-block:: sql

 bigint ceil(double value)

用途：返回不小于输入值value的最小整数

参数说明：
  - value：Double类型，若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。

返回值：Bigint类型。任一输入为NULL，返回NULL。

示例：

.. code-block:: sql

 ceil(1.1) = 2
 ceil(-1.1) = -1


CONV
```````````
函数定义：

.. code-block:: sql

 string conv(string input, bigint from_base, bigint to_base)

用途：进制转换函数

参数说明：
 - input：以string表示的要转换的整数值，接受bigint，double的隐式转换。
 - from_base，to_base：以十进制表示的进制的值，可接受的的值为2，8，10，16。接受string及double的隐式转换。
 - from_base，to_base：以十进制表示的进制的值，可接受的的值为2，8，10，16。接受string及double的隐式转换。

返回值：String类型。任一输入为NULL，返回NULL。转换过程以64位精度工作，溢出时报异常。输入如果是负值，即以'-'开头，报异常。如果输入的是小数，则会转为整数值后进行进制转换，小数部分会被舍弃。

示例 

.. code-block:: sql

 conv('1100', 2, 10) = '12'
 conv('1100', 2, 16) = 'c'
 conv('ab', 16, 10) = '171'
 conv('ab', 16, 16) = 'ab'

COS
`````````

函数定义：

.. code-block:: sql

 double cos(double number)

用途：余弦函数，输入为弧度值。

参数说明：
 - number：Double类型。若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。

返回值：Double类型。若number为NULL，返回NULL。

示例：

.. code-block:: sql

 cos(3.1415926/2)=2.6794896585028633e-8
 cos(3.1415926)=0.9999999999999986

COSH
`````````
函数定义：

.. code-block:: sql

 double cosh(double number)

用途：双曲余弦函数。

参数说明：
  - number：Double类型。若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。

返回值：Double类型。若number为NULL，返回NULL。

COT
```````````
函数定义：

.. code-block:: sql

 double cot(double number)

用途：余切函数，输入为弧度值。

参数说明：
  - number：Double类型。若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。

返回值：Double类型。若number为NULL，返回NULL。

EXP
```````````
函数定义：

.. code-block:: sql

 double exp(double number)

用途：指数函数。返回number的指数值。

参数说明：
  - number：Double类型。若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。

返回值：Double类型。若number为NULL，返回NULL。

FLOOR
`````````
函数定义：

.. code-block:: sql

 bigint floor(double number)

用途：向下取整，返回比number小的整数值。

参数说明：
      - number：Double类型，若输入为string类型或bigint型会隐式转换到double类型后参与运算，其他类型抛异常

返回值：返回Bigint类型。若number为NULL，返回NULL。

示例 

.. code-block:: sql

 floor(1.2)=1
 floor(1.9)=1
 floor(0.1)=0
 floor(-1.2)=-2
 floor(-0.1)=-1
 floor(0.0)=0
 floor(-0.0)=0

LN
```````````
函数定义：

.. code-block:: sql

 double ln(double number)

用途：返回number的自然对数。

参数说明：
      -  number：Double类型，若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。若number为NULL返回NULL, 若number为负数或零，则抛异常。

返回值：Double类型。

LOG
`````````````
函数定义：

.. code-block:: sql

 double log(double base, double x)

用途：返回以base为底的x的对数。

参数说明：
  -  base：Double类型，若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。
  -  x：Double类型，若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。

返回值：Double类型的对数值，若base和x中存在NULL，则返回NULL；若base和x中某一个值为负数或0，会引发异常；若base为1(会引发一个除零行为)也会引发异常。

POW
`````````````
函数定义：

.. code-block:: sql

 double pow(double x, double y)

用途：返回x的y次方，即x^y。

参数说明：
 - X：Double类型，若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。
 - Y：Double类型，若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。

返回值：Double类型。若x或y为NULL，则返回NULL

RAND
```````````
函数定义：

.. code-block:: sql

 double rand(bigint seed)

用途：以seed为种子返回double类型的随机数，返回值区间是的0～1。

参数说明：
  - seed：Bigint类型，随机数种子，决定随机数序列的起始值。

返回值：Double类型。

ROUND
```````````
函数定义：

.. code-block:: sql

 double round(double number, [bigint decimal_places])

用途：四舍五入到指定小数点位置。

参数说明：
  - number：Double类型，若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。
  - decimal_place：Bigint类型常量，四舍五入计算到小数点后的位置，其他类型参数会引发异常. 如果省略表示四舍五入到个位数。默认值为0。

返回值：返回Double类型。若number或decimal_places为NULL，返回NULL。

.. Note:: decimal_places可以是负数。负数会从小数点向左开始计数，并且不保留小数部分；如果decimal_places超过了整数部分长度，返回0. 

示例：

.. code-block:: sql

 round(125.315) = 125
 round(125.315, 0) = 125
 round(125.315, 1) = 125.3
 round(125.315, 2) = 125.32
 round(125.315, 3) = 125.315
 round(-125.315, 2) = -125.32
 round(123.345, -2) = 100.0
 round(null) = null
 round(123.345, 4) = 123.345
 round(123.345, -4) = 0.0

SIN
``````````
函数定义：

.. code-block:: sql

 double sin(double number) 

用途：正弦函数，输入为弧度值。

参数说明：
  - number：Double类型。若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。

返回值：Double类型。若number为NULL，返回NULL。

SINH
`````````
函数定义：

.. code-block:: sql

 double sinh(double number)

用途：双曲正弦函数。

参数说明：
  -  number：Double类型。若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。

返回值：Double类型。若number为NULL，返回NULL。

SQRT
``````````

函数定义：

.. code-block:: sql

 double sqrt(double number) 

用途：计算平方根。

参数说明：
  - number：Double类型，必须大于0。小于0时引发异常。若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。

返回值：返回double类型。若number为NULL，返回NULL。

TAN
`````````````
函数声明：

.. code-block:: sql

 double tan(double number)

用途：正切函数，输入为弧度值。

参数说明：
  - number：Double类型。若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。

返回值：Double类型。若number为NULL，返回NULL。


TANH
``````````
函数声明：

.. code-block:: sql

 double tanh(double number)

用途：双曲正切函数。

参数说明：
  - number：Double类型。若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。

返回值：Double类型。若number为NULL，返回NULL。


TRUNC
`````````````

函数声明：

.. code-block:: sql

 double trunc(double number[, bigint decimal_places])

用途：将输入值number截取到指定小数点位置。

参数说明：
  - number：Double类型，若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。
  -  decimal_places：Bigint类型常量，要截取到的小数点位置，其他类型参数会隐式转为bigint，省略此参数时默认到截取到个位数。

返回值：返回值类型为Double。若number或decimal_places为NULL，返回NULL。

.. Note::

 * 截取掉的部分补0。
 * decimal_places可以是负数，负数会从小数点向左开始截取，并且不保留小数部分；如果decimal_places超过了整数部分长度，返回0。


示例：

.. code-block:: sql

 trunc(125.815) = 125.0
 trunc(125.815, 0) =125.0
 trunc(125.815, 1) = 125.8
 trunc(125.815, 2) = 125.81
 trunc(125.815, 3) = 125.815
 trunc(-125.815, 2) = -125.81
 trunc(125.815, -1) = 120.0
 trunc(125.815, -2) = 100.0
 trunc(125.815, -3) = 0.0
 trunc(123.345, 4) = 123.345
 trunc(123.345, -4) = 0.0


字符串处理函数
~~~~~~~~~~~~~~~~

CHAR_MATCHCOUNT
`````````````````
函数声明：

.. code-block:: sql

 bigint char_matchcount(string str1, string str2)

用途：用于计算str1中的每个字符在str2中出现的次数总和。

参数说明：
  - str1，str2：String类型，必须为有效的UTF-8字符串，如果对比中发现有无效字符则函数返回负值。

返回值：Bigint类型。任一输入为NULL返回NULL。

CHR
```````
函数声明：

.. code-block:: sql

 string chr(bigint ascii)

用途：将给定ASCII码ascii转换成字符。

参数说明：
  - ascii：Bigint类型ASCII值，若输入为string类型或double类型会隐式转换到bigint类型后参与运算，其它类型抛异常。

返回值：String类型。参数范围是0~255，超过此范围会引发异常。输入值为NULL返回NULL。

CONCAT
```````````
函数声明：

.. code-block:: sql

 string concat(string a, string b...)

用途：返回值是将参数中的所有字符串连接在一起的结果。

参数说明：
 - a，b等为String类型，若输入为bigint，double或datetime类型会隐式转换为string后参与运算，其它类型报异常。

返回值：String类型。如果没有参数或者某个参数为NULL，结果均返回NULL。

示例：

.. code-block:: sql
 
 concat('ab', 'c') = 'abc'
 concat() = NULL
 concat('a', null, 'b') = NULL

INSTR
`````````
函数声明：

.. code-block:: sql

 bigint instr(string str1, string str2[, bigint start_position[, bigint nth_appearance]])

用途：计算一个子串str2在字符串str1中的位置。

参数说明：
  -  str1：String类型，搜索的字符串，若输入为bigint，double或datetime类型会隐式转换为string后参与运算，其它类型报异常。
  -  str2：String类型，要搜索的子串，若输入为bigint，double或datetime类型会隐式转换为string后参与运算，其它类型报异常。
  -  start_position：Bigint类型，其它类型会抛异常，表示从str1的第几个字符开始搜索，默认起始位置是第一个字符位置1。开始位置如果小于等于0会引发异常。
  -  nth_appearance：Bigint类型，大于0，表示子串在字符串中的第nth_appearance次匹配的位置，如果nth_appearance为其它类型或小于等于0会抛异常。

返回值：Bigint类型

.. Note::
    - 如果在str1中未找到str2，返回0。
    - 任一输入参数为NULL返回NULL 
    - 如果str2为空串时总是能匹配成功，因此instr('abc', '') 会返回1

示例：

.. code-block:: sql

  instr('Tech on the net', 'e') = 2 
  instr('Tech on the net', 'e', 1, 1) = 2 
  instr('Tech on the net', 'e', 1, 2) = 11 
  instr('Tech on the net', 'e', 1, 3) = 14 

IS_ENCODING
````````````````
函数声明：

.. code-block:: sql

 boolean is_encoding(string str, string from_encoding, string to_encoding)

用途：判断输入字符串str是否可以从指定的一个字符集from_encoding转为另一个字符集to_encoding。可用于判断输入是否为'乱码'，通常的用法是将from_encoding设为'utf-8'，to_encoding设为'gbk'。

参数说明：
  -  str：String类型，输入为NULL返回NULL。空字符串则可以被认为属于任何字符集。
  -  from_encoding，to_encoding：String类型，源及目标字符集。输入为NULL返回NULL。

返回值：Boolean类型，如果str能够成功转换，则返回true，否则返回false

示例：

.. code-block:: sql
 
    is_encoding('测试', 'utf-8', 'gbk') = true
    is_encoding('測試', 'utf-8', 'gbk') = true
         -- gbk字库中有这两个繁体字
    is_encoding('測試', 'utf-8', 'gb2312') = false
         -- gb2312库中不包括这两个字


LENGTH
`````````````
命令格式：

.. code-block:: sql

 bigint length(string str)

用途：返回字符串str的长度。

参数说明：
 - str：String类型，若输入为bigint，double或datetime类型会隐式转换为string后参与运算，其它类型报异常。

返回值：Bigint类型。若str是NULL返回NULL。如果str非UTF-8编码格式，返回-1。

示例 

.. code-block:: sql

 length('hi! 中国') = 6

LENGTHB
```````````
函数声明：

.. code-block:: sql

 bigint lengthb(string str)

用途：返回字符串str的以字节为单位的长度。

参数说明：
  - str：String类型，若输入为bigint，double或者datetime类型会隐式转换为string后参与运算，其它类型报异常。

返回值：Bigint类型。若str是NULL返回NULL。

示例 

.. code-block:: sql

 lengthb('hi! 中国') = 10


MD5
`````````````
函数声明：

.. code-block:: sql

 string md5(string value)

用途：计算输入字符串value的md5值

参数说明：
  - value：String类型，如果输入类型是bigint，double或者datetime会隐式转换成string类型参与运算，其它类型报异常。输入为NULL，返回NULL。

返回值：String类型。

REGEXP_EXTRACT
```````````````
函数声明：

.. code-block:: sql

 string regexp_extract(string source, string pattern[, bigint occurrence])

用途：将字符串source按照pattern正则表达式的规则拆分，返回第occurrence个group的字符。

参数说明：
  - source：String类型，待搜索的字符串。
  - pattern：String类型常量，pattern为空串时抛异常，pattern中如果没有指定group，抛异常。
  - occurrence：Bigint类型常量，必须>=0，其它类型或小于0时抛异常，不指定时默认为1，表示返回第一个group。若occurrence = 0，返回满足整个pattern的子串。

返回值：String类型，任一输入为NULL返回NULL。

示例：

.. code-block:: sql

 regexp_extract('foothebar', 'foo(.*?)(bar)', 1) = the
 regexp_extract('foothebar', 'foo(.*?)(bar)', 2) = bar
 regexp_extract('foothebar', 'foo(.*?)(bar)', 0) = foothebar

 regexp_extract('foothebar', 'foothebar')                
    -- 异常返回，pattern中没有指定group

REGEXP_INSTR
````````````````
命令格式：

.. code-block:: sql

 bigint regexp_instr(string source, string pattern[, bigint start_position[, bigint nth_occurrence[, bigint return_option]])

用途：返回字符串source从start_position开始，和pattern第n次(nth_occurrence)匹配的子串的起始/结束位置。任一输入参数为NULL时返回NULL。

参数说明：
  -  source：String类型，待搜索的字符串。
  -  pattern：String类型常量，pattern为空串时抛异常。
  -  start_position：Bigint类型常量，搜索的开始位置。不指定时默认值为1，其它类型或小于等于0的值会抛异常。
  -  nth_occurrence：Bigint类型常量，不指定时默认值为1，表示搜索第一次出现的位置。小于等于0或者其它类型抛异常。
  -  return_option：Bigint类型常量，值为0或1，其它类型或不允许的值会抛异常。0表示返回匹配的开始位置，1表示返回匹配的结束位置。

返回值：Bigint类型。视return_option指定的类型返回匹配的子串在source中的开始或结束位置。

示例：

.. code-block:: sql

 regexp_instr("i love www.taobao.com", "o[[:alpha:]]{1}", 3, 2) = 14 

REGEXP_REPLACE
``````````````````
函数声明：

.. code-block:: sql

 string regexp_replace(string source, string pattern, string replace_string[, bigint occurrence])

用途：将source字符串中第occurrence次匹配pattern的子串替换成指定字符串replace_string后返回。

参数说明：
    - source：String类型，要替换的字符串。
    - pattern：String类型常量，要匹配的模式，pattern为空串时抛异常。
    - replace_string：String类型，将匹配的pattern替换成的字符串。
    - occurrence：Bigint类型常量，必须大于等于0，表示将第几次匹配替换成replace_string，为0时表示替换掉所有的匹配子串。其它类型或小于0抛异常。可缺省，默认值为0。

返回值：String类型，当引用不存在的组时，不进行替换。当输入source，pattern，occurrence参数为NULL时返回NULL，若replace_string为NULL且pattern有匹配，返回NULL，replace_string为NULL但pattern不匹配，则返回原串
。

.. note:: 当引用不存在的组时，行为未定义。

示例：

.. code-block:: sql

 regexp_replace("123.456.7890", "([[:digit:]]{3})\\.([[:digit:]]{3})\\.([[:digit:]]{4})", "(\\1)\\2-\\3", 0) = "(123)456-7890"
 regexp_replace("abcd", "(.)", "\\1 ", 0) = "a b c d "
 regexp_replace("abcd", "(.)", "\\1 ", 1) = "a bcd"
 regexp_replace("abcd", "(.)", "\\2", 1) = "abcd"
     -- 因为pattern中只定义了一个组，引用的第二个组不存在，请避免这样使用，引用不存在的组的结果未定义。
 regexp_replace("abcd", "(.*)(.)$", "\\2", 0) = "d"
 regexp_replace("abcd", "a", "\\1", 0) = "bcd"
     -- 因为在pattern中没有组的定义，所以\1引用了不存在的组，请避免这样使用，引用不存在的组的结果未定义。

REGEXP_SUBSTR
`````````````````
函数声明：

.. code-block:: sql

 string regexp_substr(string source, string pattern[, bigint start_position[, bigint nth_occurrence]])

用途：从start_position位置开始，source中第nth_occurrence次匹配指定模式pattern的子串。

参数说明：
 -   source：String类型，搜索的字符串。
 -   pattern：String类型常量，要匹配的模型，pattern为空串时抛异常。
 -   start_position：Bigint常量，必须大于0。其它类型或小于等于0时抛异常，不指定时默认为1，表示从source的第一个字符开始匹配。不指定时默认为1，表示从source的第一个字符开始匹配。
 -   nth_occurrence：Bigint常量，必须大于0，其它类型或小于等于0时抛异常。不指定时默认为1，表示返回第一次匹配的子串。不指定时默认为1，表示返回第一次匹配的子串。 

返回值：String类型。任一输入参数为NULL返回NULL。没有匹配时返回NULL。

示例：

.. code-block:: sql

 regexp_substr ("I love aliyun very much", "a[[:alpha:]]{5}") = "aliyun"
 regexp_substr('I have 2 apples and 100 bucks!', '[[:blank:]][[:alnum:]]*', 1, 1) = " have"
 regexp_substr('I have 2 apples and 100 bucks!', '[[:blank:]][[:alnum:]]*', 1, 2) = " 2"

REGEXP_COUNT
`````````````````

函数声明：

.. code-block:: sql

 bigint regexp_count(string source, string pattern[, bigint start_position])

用途：计算source中从start_position开始，匹配指定模式pattern的子串的次数。

参数说明：
 -   source：String类型，搜索的字符串，其它类型报异常。
 -   pattern：String类型常量，要匹配的模型，pattern为空串时抛异常，其它类型报异常。
 -   start_position：Bigint类型常量，必须大于0。其它类型或小于等于0时抛异常，不指定时默认为1，表示从source的第一个字符开始匹配。

返回值：Bigint类型。没有匹配时返回0。任一输入参数为NULL返回NULL。

示例：

.. code-block:: sql

 regexp_count('abababc', 'a.c') = 1
 regexp_count('abcde', '[[:alpha:]]{2}', 3) = 1


SPLIT_PART
`````````````````
函数声明：

.. code-block:: sql

 string split_part(string str, string separator, bigint start[, bigint end])

用途：依照分隔符separator拆分字符串str，返回从第start部分到第end部分的子串(闭区间)。

参数说明：
  - Str：String类型，要拆分的字符串。如果是bigint，double或者datetime类型会隐式转换到string类型后参加运算，其它类型报异常。
  - Separator：String类型常量，拆分用的分隔符，可以是一个字符，也可以是一个字符串，其它类型会引发异常。
  - start：Bigint类型常量，必须大于0。非常量或其它类型抛异常。返回段的开始编号(从1开始)，如果没有指定end，则返回start指定的段。
  - end：Bigint类型常量，大于等于start，否则抛异常。返回段的截止编号，非常量或其他类型会引发异常。可省略，缺省时表示最后一部分。

返回值：String类型。若任意参数为NULL，返回NULL；若separator为空串，返回原字符串str。

.. Note:: 

  - 如果separator不存在于str中，且start指定为1，返回整个str。若输入为空串，输出为空串。
  - 如果start的值大于切分后实际的分段数，例如：字符串拆分完有6个片段，但start大于6，返回空串''。
  - 若end大于片段个数，按片段个数处理。

示例：

.. code-block:: sql

 split_part('a,b,c,d', ',', 1) = 'a'
 split_part('a,b,c,d', ',', 1, 2) = 'a,b'
 split_part('a,b,c,d', ',', 10) =  ''
 
SUBSTR
````````````
函数声明：

.. code-block:: sql

 string substr(string str, bigint start_position[, bigint length])

用途：返回字符串str从start_position开始长度为length的子串。

参数说明：
 - str：String类型，若输入为bigint，double或者datetime类型会隐式转换为string后参与运算，其它类型报异常。
 - start_position：Bigint类型，当start_position为负数时表示开始位置是从字符串的结尾往前倒数，最后一个字符是-1，起始位置为1。其它类型抛异常。
 - length：Bigint类型，大于0，其它类型或小于等于0抛异常。子串的长度。

返回值：String类型。若任一输入为NULL，返回NULL。

.. Note:: 当length被省略时，返回到str结尾的子串。

示例 

.. code-block:: sql

  substr("abc", 2) = "bc" 
  substr("abc", 2, 1) = "b" 

TOLOWER
````````````
函数声明：

.. code-block:: sql

 string tolower(string source)

用途：输出英文字符串source对应的小写字符串。

参数说明：
 - source：String类型，若输入为bigint，double或者datetime类型会隐式转换为string后参与运算，其它类型报异常。

返回值：String类型。输入为NULL时返回NULL。

示例：

.. code-block:: sql

 tolower("aBcd") = "abcd" 
 tolower("哈哈Cd") = "哈哈cd" 

TOUPPER
`````````````
函数声明：

.. code-block:: sql

 string toupper(string source)

用途：输出英文字符source串对应的大写字符串。

参数说明：
 - source：String类型，若输入为bigint，double或者datetime类型会隐式转换为string后参与运算，其它类型报异常。

返回值：String类型。输入为NULL时返回NULL。

示例：

.. code-block:: sql
 
 toupper("aBcd") = "ABCD" 
 toupper("哈哈Cd") = "哈哈CD" 

.. _odps_sql_function_string_to_char:

TO_CHAR
```````````````
函数声明：

.. code-block:: sql

 string to_char(boolean value)
 string to_char(bigint value)
 string to_char(double value)

用途：将Boolean类型、bigint类型或者double类型转为对应的string类型表示 

参数说明：
  - value：可以接受boolean类型、bigint类型或者double类型输入，其它类型抛异常。对datetime类型的格式化输出请参考另一同名函数 :ref:`odps_sql_function_datetime_to_char` 。

返回值：String类型。如果输入为NULL，返回NULL。

示例：

.. code-block:: sql
 
 to_char(123) = '123' 
 to_char(true) = 'TRUE' 
 to_char(1.23) = '1.23'
 to_char(null) = NULL

TRIM
`````````````
函数声明：

.. code-block:: sql

 string trim(string str)

用途：将输入字符串str去除左右空格。

参数说明：
 - str：String类型，若输入为bigint，double或者datetime类型会隐式转换为string后参与运算，其它类型报异常。

返回值：String类型。输入为NULL时返回NULL。

         
日期函数
~~~~~~~~~~~~~
ODPS SQL提供了针对datetime类型的操作函数。

DATEADD
``````````````
函数声明：

.. code-block:: sql

 datetime dateadd(datetime date, bigint delta, string datepart)

用途：按照指定的单位datepart和幅度delta修改date的值。

参数说明：
 - date：Datetime类型，日期值。若输入为string类型会隐式转换为datetime类型后参与运算，其它类型抛异常。。
 - delta：Bigint类型，修改幅度。若输入为string类型或double型会隐式转换到bigint类型后参与运算，其他类型会引发异常。若delta大于0，加；否则减。
 - datepart：String类型常量。此字段的取值遵循string与datetime类型转换的约定，即'yyyy'表示年，'mm'表示月…. 关于类型转换的规则请参考 :ref:`odps_sql_string_2_datetime` 。此外也支持扩展的日期格式：年-'year'，月-'month'或'mon'，日-'day'，小时-'hour'。非常量、不支持的格式会或其它类型抛异常。

返回值：Datetime类型。若任一输入参数为NULL，返回NULL。

.. Note:: 
 
 - 按照指定的单位增减delta时导致的对更高单位的进位或退位，年、月、时、分、秒分别按照10进制、12进制、24进制、60进制、60进制计算。当delta的单位是月时，计算规则如下：若datetime的月部分在增加delta值之后不造成day溢出，则保持day值不变，否则把day值设置为结果月份的最后一天。
 - datepart的取值遵循string与datetime类型转换的约定，即'yyyy'表示年，'mm'表示月…. datetime相关的内建函数如无特殊说明均遵守此约定。同时如果没有特殊说明，所有datetime相关的内建函数的part部分也同样支持扩展的日期格式：年-'year'，月-'month'或'mon'，日-'day'，小时-'hour'。

示例：

.. code-block:: sql

 若trans_date = 2005-02-28 00:00:00：
 dateadd(trans_date, 1, 'dd') = 2005-03-01 00:00:00            
   -- 加一天，结果超出当年2月份的最后一天，实际值为下个月的第一天
 dateadd(trans_date, -1, 'dd') = 2005-02-27 00:00:00          
   -- 减一天
 dateadd(trans_date, 20, 'mm') = 2006-10-28 00:00:00       
   -- 加20个月，月份溢出，年份加1 
 
 若trans_date = 2005-02-28 00:00:00, dateadd(transdate, 1, 'mm') = 2005-03-28 00:00:00
 若trans_date = 2005-01-29 00:00:00, dateadd(transdate, 1, 'mm') = 2005-02-28 00:00:00                  
   -- 2005年2月没有29日，日期截取至当月最后一天
 若trans_date = 2005-03-30 00:00:00, dateadd(transdate, -1, 'mm') = 2005-02-28 00:00:00                  

此处对trans_date的数值表示仅作示例使用，在文档中有关datetime介绍会经常使用到这种简易的表达方式。在ODPS SQL中，datetime类型没有直接的常数表示方式，如下使用方式是错误的：

.. code-block:: sql

 select dateadd(2005-03-30 00:00:00, -1, 'mm') from tbl1;  

如果一定要描述datetime类型常量，请尝试如下方法：

.. code-block:: sql

 select dateadd(cast("2005-03-30 00:00:00" as datetime), -1, 'mm') from tbl1;
     -- 将String类型常量显式转换为Datetime类型

DATEDIFF
`````````````
命令格式：

.. code-block:: sql

 bigint datediff(datetime date1, datetime date2, string datepart)

用途：计算两个时间date1，date2在指定时间单位datepart的差值。

参数说明：
 - datet1，date2：Datetime类型，被减数和减数，若输入为string类型会隐式转换为datetime类型后参与运算，其它类型抛异常。
 - datepart：String类型常量。支持扩展的日期格式。若datepart不符合指定格式或者其它类型则会发生异常。

返回值：Bigint类型。任一输入参数是NULL，返回NULL。

.. note:: 计算时会按照datepart切掉低单位部分，然后再计算结果。

示例：

.. code-block:: sql

 若start = 2005-12-31 23:59:59，end = 2006-01-01 00:00:00:
 datediff(end, start, 'dd') = 1
 datediff(end, start, 'mm') = 1
 datediff(end, start, 'yyyy') = 1
 datediff(end, start, 'hh') = 1
 datediff(end, start, 'mi') = 1
 datediff(end, start, 'ss') = 1
 
 datediff(2013-05-31 13:00:00, 2013-05-31 12:30:00, 'ss') = 1800
 datediff(2013-05-31 13:00:00, 2013-05-31 12:30:00, 'mi') = 30


DATEPART
``````````````
函数声明：

.. code-block:: sql

 bigint datepart(datetime date, string datepart)

用途：提取日期date中指定的时间单位datepart的值

参数说明：
 - date：Datetime类型，若输入为string类型会隐式转换为datetime类型后参与运算，其它类型抛异常。
 - datepart：String类型常量。支持扩展的日期格式。若datepart不符合指定格式或者其它类型则会发生异常。

返回值：Bigint类型。若任一输入参数为NULL，返回NULL。

示例：

.. code-block:: sql

 datepart('2013-06-08 01:10:00', 'yyyy')  =  2013
 datepart('2013-06-08 01:10:00', 'mm')  =  6


DATETRUNC
````````````
函数声明：

.. code-block:: sql

 datetime datetrunc (datetime date, string datepart)

用途：返回日期date被截取指定时间单位datepart后的日期值。

参数说明：
 - date：Datetime类型，若输入为string类型会隐式转换为datetime类型后参与运算，其它类型抛异常。
 - datepart：String类型常量。支持扩展的日期格式。若datepartt不符合指定格式或者其它类型则会发生异常。

返回值：Datetime类型。任意一个参数为NULL的时候返回NULL。


示例：

.. code-block:: sql
 
 datetrunc(2011-12-07 16:28:46, 'yyyy') = 2011-01-01 00:00:00
 datetrunc(2011-12-07 16:28:46, 'month') = 2011-12-01 00:00:00
 datetrunc(2011-12-07 16:28:46, 'DD') = 2011-12-07 00:00:00


FROM_UNIXTIME
`````````````````
函数声明：

.. code-block:: sql

 datetime from_unixtime(bigint unixtime)

用途：将数字型的unix时间日期值unixtime转为日期值。

参数说明：
  - unixtime：Bigint类型，秒数，unix格式的日期时间值，若输入为string，double类型会隐式转换为bigint后参与运算。

返回值：Datetime类型的日期值，unixtime为NULL时返回NULL。

GETDATE
``````````````
函数声明：

.. code-block:: sql

 datetime getdate()

用途：获取当前系统时间。使用东八区时间作为ODPS标准时间。

返回值：返回当前日期和时间，datetime类型。


.. Note:: 在一个ODPS SQL任务中(以分布式方式执行)，getdate总是返回一个固定的值。返回结果会是ODPS SQL执行期间的任意时间，时间精度精确到秒。

ISDATE
````````````
函数声明：

.. code-block:: sql

 boolean isdate(string date, string format)

用途：判断一个日期字符串能否根据对应的格式串转换为一个日期值，如果转换成功返回TRUE，否则返回FALSE。

参数说明：
 - date：String格式的日期值，若输入为bigint，double或者datetime类型会隐式转换为string类型后参与运算，其它类型报异常。
 - format：String类型常量，不支持日期扩展格式。其它类型或不支持的格式会抛异常。如果format中出现多余的格式串，则只取第一个格式串对应的日期数值，其余的会被视为分隔符。如isdate('1234-yyyy ', 'yyyy-yyyy ')，会返回TRUE。

返回值：Boolean类型，如任意参数为NULL，返回NULL。

LASTDAY
``````````````
函数声明：

.. code-block:: sql

 datetime lastday(datetimei date)

用途：取date当月的最后一天，截取到天，时分秒部分为00:00:00。

参数说明：
 - date：Datetime类型，若输入为string类型会隐式转换为datetime类型后参与运算，其它类型报异常。

返回值：Datetime类型，如输入为NULL，返回NULL

.. _odps_sql_function_datetime_to_date:

TO_DATE
`````````````
函数声明：

.. code-block:: sql

 datetime to_date(string date, string format)

用途：将一个字符串date按照format指定的格式转成日期值。

参数说明：
 - date：String类型，要转换的字符串格式的日期值，若输入为bigint，double或者datetime类型会隐式转换为String类型后参与运算，为其它类型抛异常，为空串时抛异常。
 - format：String类型常量，日期格式。非常量或其他类型会引发异常。format不支持日期扩展格式，其他字符作为无用字符在解析时忽略。format参数至少包含'yyyy'，否则引发异常，如果format中出现多余的格式串，则只取第一个格式串对应的日期数值，其余的会被视为分隔符。如to_date('1234-2234 ', 'yyyy-yyyy ')会返回1234-01-01 00:00:00。

返回值：Datetime类型。若任一输入为NULL，返回NULL值。



示例：

.. code-block:: sql
 
 to_date('阿里巴巴2010-12*03', '阿里巴巴yyyy-mm*dd') = 2010-12-03 00:00:00
 to_date('20080718', 'yyyymmdd') = 2008-07-18 00:00:00

 to_date('2008718', 'yyyymmdd')
     -- 格式不符合，引发异常 
 to_date('阿里巴巴2010-12*3', '阿里巴巴yyyy-mm*dd') 
     -- 格式不符合，引发异常 
 to_date('2010-24-01', 'yyyy')
     -- 格式不符合，引发异常 

.. _odps_sql_function_datetime_to_char:

TO_CHAR
``````````````
函数声明：

.. code-block:: sql

 string to_char(datetime date, string format)

用途：将日期类型date按照format指定的格式转成字符串 

参数类型：
 - date：Datetime类型，要转换的日期值，若输入为string类型会隐式转换为datetime类型后参与运算，其它类型抛异常。
 - format：String类型常量。非常量或其他类型会引发异常。format中的日期格式部分会被替换成相应的数据，其它字符直接输出。

返回值：String类型。任一输入参数为NULL，返回NULL。

示例：

.. code-block:: sql

 to_char('阿里巴巴2010-12*03', '阿里巴巴yyyy-mm*dd') = '2010-12-03 00:00:00'
 to_char('20080718', 'yyyymmdd') = '2008-07-18 00:00:00'
 to_char('阿里巴巴2010-12*3', '阿里巴巴yyyy-mm*dd') -- 引发异常
 to_char('2010-24-01', 'yyyy') -- 会引发异常
 to_char('2008718', 'yyyymmdd') -- 会引发异常

.. note:: 关于其他类型向string类型转换请参考 :ref:`odps_sql_function_string_to_char` 。

UNIX_TIMESTAMP
`````````````````
函数声明：

.. code-block:: sql

 bigint unix_timestamp(datetime date)

用途：将日期date转化为整型的unix格式的日期时间值。

参数说明：
 - date：Datetime类型日期值，若输入为string类型会隐式转换为datetime类型后参与运算，其它类型抛异常。

返回值：Bigint类型，表示unix格式日期值，date为NULL时返回NULL。

WEEKDAY
```````````
函数声明：

.. code-block:: sql

 bigint weekday (datetime date)

用途：返回date日期当前周的第几天。

参数说明：
 - date：Datetime类型，若输入为string类型会隐式转换为datetime类型后参与运算，其它类型抛异常。

返回值：Bigint类型，若输入参数为NULL，返回NULL。周一作为一周的第一天，返回值为0。其他日期依次递增，周日返回6。


WEEKOFYEAR
`````````````````
函数声明：

.. code-block:: sql

 bigint weekofyear(datetime date)

用途：返回日期date位于那一年的第几周。周一作为一周的第一天。

参数说明：
 - date：Datetime类型日期值，若输入为string类型会隐式转换为datetime类型后参与运算，其它类型抛异常。

返回值：Bigint类型。若输入为NULL，返回NULL

.. _odps_sql_window:

窗口函数
~~~~~~~~~~~~
ODPS SQL中可以使用窗口函数进行灵活的分析处理工作，窗口函数只能出现在select子句中，窗口函数中不要嵌套使用窗口函数和聚合函数，窗口函数不可以和同级别的聚合函数一起使用。目前在一个ODPS SQL语句中，可以使用至多5个窗口函数。

窗口函数的语法 

.. code-block:: sql

  window_func() over (partition by col1, [col2…] [order by col1 [asc|desc][, col2[asc|desc]…]] windowing_clause)

- partition by部分用来指定开窗的列。分区列的值相同的行被视为在同一个窗口内。现阶段，同一窗口内最多包含1亿行数据，否则运行时报错。
- order by用来指定数据在一个窗口内如何排序
- windowing_clause部分可以用rows指定开窗方式，有两种方式：
   * rows between x preceding|following and y preceding|following表示窗口范围是从前或后x行到前或后y行。
   * rows x preceding|following窗口范围是从前或后第x行到当前行。
   * x，y必须为大于等于0的整数常量，限定范围0 ~ 10000，值为0时表示当前行。必须指定order by才可以用rows方式指定窗口范围。

.. note:: 并非所有的窗口函数都可以用rows指定开窗方式，支持这种用法的窗口函数有avg、count、max、min、stddev和sum。

COUNT
````````
函数声明：

.. code-block:: sql

 bigint count([distinct] expr) over(partition by col1[, col2…] [order by col1 [asc|desc][, col2[asc|desc]…]] [windowing_clause])

用途：计算计数值。

参数说明：
 - expr：任意类型，当值为NULL时，该行不参与计算。当指定distinct关键字时表示取唯一值的计数值。
 - partition by col1[, col2…]：指定开窗口的列。
 - order by col1 [asc|desc], col2[asc|desc]：不指定order by时，返回当前窗口内expr的计数值，指定order by时返回结果以指定的顺序排序，并且值为当前窗口内从开始行到当前行的累计计数值。

返回值：Bigint类型。

.. note:: 当指定distinct关键字时不能写order by。

示例：假设存在表test_src，表中存在bigint类型的列user_id，

.. code-block:: sql

  select user_id, 
      count(user_id) over (partition by user_id) as count 
  from test_src;
  
  +---------+------------+
  | user_id |  count     |
  +---------+------------+
  | 1       | 3          |
  | 1       | 3          |
  | 1       | 3          |
  | 2       | 1          |
  | 3       | 1          |
  +---------+------------+
  
      -- 不指定order by时，返回当前窗口内user_id的计数值
  
  select user_id, 
      count(user_id) over (partition by user_id order by user_id) as count 
  from test_src;
  
  +---------+------------+
  | user_id | count      |
  +---------+------------+
  | 1       | 1          |      -- 窗口起始
  | 1       | 2          |      -- 到当前行共计两条记录，返回2
  | 1       | 3          |
  | 2       | 1          |
  | 3       | 1          |
  +---------+------------+
  
  -- 指定order by时，返回当前窗口内从开始行到当前行的累计计数值。

AVG
````````
函数声明：

.. code-block:: sql

 avg([distinct] expr) over(partition by col1[, col2…] [order by col1 [asc|desc] [, col2[asc|desc]…]] [windowing_clause])

用途：计算平均值。

参数说明：
 - distinct：当指定distinct关键字时表示取唯一值的平均值。
 - expr：Double类型，若输入为string，bigint会隐式转换到double类型后参与运算，其它类型抛异常。当值为NULL时，该行不参与计算。Boolean类型不允许参与计算。
 - partition by col1[, col2]…：指定开窗口的列。
 - order by col1 [asc|desc], col2[asc|desc]：不指定order by时返回当前窗口内所有值的平均值，指定order by时返回结果以指定的方式排序，并且返回窗口内从开始行到当前行的累计平均值。

返回值：Double类型。

.. note:: 指明distinct关键字时不能写order by。

MAX
``````````
函数声明：

.. code-block:: sql

 max([distinct] expr) over(partition by col1[, col2…] [order by col1 [asc|desc][, col2[asc|desc]…]] [windowing_clause])

用途：计算最大值。

参数说明：
 - expr：除Boolean以外的任意类型，当值为NULL时，该行不参与计算。当指定distinct关键字时表示取唯一值的最大值(指定该参数与否对结果没有影响)。
 - partition by col1[, col2…]：指定开窗口的列。
 - order by col1 [asc|desc], col2[asc|desc]：不指定order by时，返回当前窗口内的最大值。指定order by时，返回结果以指定的方式排序，并且值为当前窗口内从开始行到当前行的最大值。

返回值：同expr类型。

.. note:: 当指定distinct关键字时不能写order by。

MIN
`````````
函数声明：

.. code-block:: sql

 min([distinct] expr) over(partition by col1[, col2…] [order by col1 [asc|desc][, col2[asc|desc]…]] [windowing_clause])

用途：计算最小值。

参数说明：
 - expr：除boolean以外的任意类型，当值为NULL时，该行不参与计算。当指定distinct关键字时表示取唯一值的最小值(指定该参数与否对结果没有影响)。
 - partition by col1[, col2..]：指定开窗口的列。
 - order by col1 [asc|desc], col2[asc|desc]：不指定order by时，返回当前窗口内的最小值。指定order by时，返回结果以指定的方式排序，并且值为当前窗口内从开始行到当前行的最小值。

返回值：同expr类型。

.. note:: 当指定distinct关键字时不能写order by。

MEDIAN
``````````````
函数声明：

.. code-block:: sql

 double median(double number) over(partition by col1[, col2…])

用途：计算中位数。

参数说明：
 - number：Double类型。若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。当输入值为null时忽略。
 - partition by col1[, col2…]：指定开窗口的列。

返回值：Double类型。

STDDEV
````````````
函数声明：

.. code-block:: sql

 double stddev([distinct] expr) over(partition by col1[, col2…] [order by col1 [asc|desc][, col2[asc|desc]…]] [windowing_clause])

用途：总体标准差。

参数说明：
  - expr：Double类型。若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。当输入值为NULL时忽略该行。当指定distinct关键字时表示计算唯一值的总体标准差。
  - partition by col1[, col2..]：指定开窗口的列。
  - order by col1 [asc|desc], col2[asc|desc]：不指定order by时，返回当前窗口内的总体标准差。指定order by时，返回结果以指定的方式排序，并且值为当前窗口内从开始行到当前行的总体标准差。

返回值：Double类型。

.. note:: 当指定distinct关键字时不能写order by。

STDDEV_SAMP
```````````````
函数声明：

.. code-block:: sql

 double stddev_samp([distinct] expr) over(partition by col1[, col2…] [order by col1 [asc|desc][, col2[asc|desc]…]] [windowing_clause])

用途：样本标准差。

参数说明：
  - expr：Double类型。若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。当输入值为NULL时忽略该行。当指定distinct关键字时表示计算唯一值的样本标准差。
  - partition by col1[, col2..]：指定开窗口的列。
  - order by col1 [asc|desc], col2[asc|desc]：不指定order by时，返回当前窗口内的样本标准差。指定order by时，返回结果以指定的方式排序，并且值为当前窗口内从开始行到当前行的样本标准差。

返回值：Double类型。

.. note:: 当指定distinct关键字时不能写order by。

SUM
````````
函数声明：

.. code-block:: sql

 sum([distinct] expr) over(partition by col1[, col2…] [order by col1 [asc|desc][, col2[asc|desc]…]] [windowing_clause])

用途：计算汇总值。

参数说明：
  - expr：Double类型，当输入为string，bigint时隐式转换为double参与运算，其它类型报异常。当值为NULL时，该行不参与计算。指定distinct关键字时表示计算唯一值的汇总值。
  - partition by col1[, col2..]：指定开窗口的列。
  - order by col1 [asc|desc], col2[asc|desc]：不指定order by时，返回当前窗口内expr的汇总值。指定order by时，返回结果以指定的方式排序，并且返回当前窗口从首行至当前行的累计汇总值。

返回值：输入参数是bigint返回bigint，输入参数为double或string时，返回double类型。

.. note:: 当指定distinct时不能用order by。

DENSE_RANK
`````````````````
命令格式：

.. code-block:: sql

 bigint dense_rank() over(partition by col1[, col2…] order by col1 [asc|desc][, col2[asc|desc]…])

用途：计算连续排名。col2相同的行数据获得的排名相同。

参数说明：
 - partition by col1[, col2..]：指定开窗口的列。
 - order by col1 [asc|desc], col2[asc|desc]：指定排名依据的值。

返回值：Bigint类型。

RANK
``````````
命令格式：

.. code-block:: sql

 bigint rank() over(partition by col1[, col2…] order by col1 [asc|desc][, col2[asc|desc]…])

用途：计算排名。col2相同的行数据获得排名顺序下降。

参数说明：
 - partition by col2[, col2..]：指定开窗口的列。
 - order by col1 [asc|desc], col2[asc|desc]：指定排名依据的值。

返回值：Bigint类型。
	
LAG
`````````
函数声明：

.. code-block:: sql

 lag(expr，bigint offset, default) over(partition by col1[, col2…] [order by col1 [asc|desc][, col2[asc|desc]…]])

用途：按偏移量取当前行之前第几行的值，如当前行号为rn，则取行号为rn-offset的值。

参数说明：
 - expr：任意类型。
 - offset：Bigint类型常量，输入为string，double到bigint的隐式转换，offset > 0。
 - default：当offset指定的范围越界时的缺省值，常量，默认值为NULL。
 - partition by col1[, col2..]：指定开窗口的列。
 - order by col1 [asc|desc], col2[asc|desc]：指定返回结果的排序方式。

返回值：同expr类型。

LEAD
`````````
函数声明：

.. code-block:: sql

 lead(expr, bigint offset, default) over(partition by col1[, col2…] [order by col1 [asc|desc][, col2[asc|desc]…]])

用途：按偏移量取当前行之后第几行的值，如当前行号为rn则取行号为rn+offset的值。

参数说明：
 - expr：任意类型。
 - offset：Bigint类型常量，输入为string，double到bigint的隐式转换，offset > 0。
 - default：当offset指一的范围越界时的缺省值，常量。
 - partition by col1[, col2..]：指定开窗口的列。
 - order by col1 [asc|desc], col2[asc|desc]：指定返回结果的排序方式。

返回值：同expr类型。


PERCENT_RANK
```````````````
函数声明：

.. code-block:: sql

 percent_rank() over(partition by col1[, col2…] order by col1 [asc|desc][, col2[asc|desc]…])

用途：计算一组数据中某行的相对排名。

参数说明：
  - partition by col1[, col2..]：指定开窗口的列。
  - order by col1 [asc|desc], col2[asc|desc]：指定排名依据的值。

返回值：Double类型，值域为[0, 1]，相对排名的计算方式为为：(rank-1)/(number of rows -1)。

.. Note:: 目前限制单个窗口内的行数不超过10,000,000条。
  
  
ROW_NUMBER
`````````````````
函数声明：

.. code-block:: sql

 row_number() over(partition by col1[, col2…] order by col1 [asc|desc][, col2[asc|desc]…])

用途：计算行号，从1开始。

参数说明：
 - partition by col1[, col2..]：指定开窗口的列。
 - order by col1 [asc|desc], col2[asc|desc]：指定结果返回时的排序的值。

返回值：Bigint类型。

CLUSTER_SAMPLE
```````````````
函数声明：

.. code-block:: sql
 
 boolean cluster_sample(bigint x[, bigint y]) over(partition by col1[, col2..])

用途：分组抽样。

参数说明：

  - x：Bigint类型常量，x>=1。若指定参数y，x表示将一个窗口分为x份；否则，x表示在一个窗口中抽取x行记录(即有x行返回值为true)。x为NULL时，返回值为NULL。
  - y：Bigint类型常量，y>=1，y<=x。表示从一个窗口分的x份中抽取y份记录(即y份记录返回值为true)。y为NULL时，返回值为NULL。
  - partition by col1[, col2]：指定开窗口的列。

返回值：Boolean类型。

示例，如表test_tbl中有key，value两列，key为分组字段，值有groupa，groupb两组，value为值，如下

.. code-block:: sql

 +------------+--------------------+
 | key        | value              |
 +------------+--------------------+
 | groupa     | -1.34764165478145  |
 | groupa     | 0.740212609046718  |
 | groupa     | 0.167537127858695  |
 | groupa     | 0.630314566185241  |
 | groupa     | 0.0112401388646925 |
 | groupa     | 0.199165745875297  |
 | groupa     | -0.320543343353587 |
 | groupa     | -0.273930924365012 |
 | groupa     | 0.386177958942063  |
 | groupa     | -1.09209976687047  |
 | groupb     | -1.10847690938643  |
 | groupb     | -0.725703978381499 |
 | groupb     | 1.05064697475759   |
 | groupb     | 0.135751224393789  |
 | groupb     | 2.13313102040396   |
 | groupb     | -1.11828960785008  |
 | groupb     | -0.849235511508911 |
 | groupb     | 1.27913806620453   |
 | groupb     | -0.330817716670401 |
 | groupb     | -0.300156896191195 |
 | groupb     | 2.4704244205196    |
 | groupb     | -1.28051882084434  |
 +------------+--------------------+

想要从每组中抽取约10%的值，可以用以下ODPS SQL完成：

.. code-block:: sql

 select key, value 
 from (
   select key, value, cluster_sample(10, 1) over(partition by key) as flag
   from tbl
 ) sub
 where flag = true;

 +--------+--------------------+
 | key    | value              |
 +--------+--------------------+
 | groupa | -1.34764165478145  |
 | groupb | -0.725703978381499 |
 | groupb | 2.4704244205196    |
 +-----+-----------------------+

.. _odps_sql_aggr:

聚合函数
~~~~~~~~~~~~~~~~~~~~
聚合函数，其输入与输出是多对一的关系，即将多条输入记录聚合成一条输出值。可以与SQL中的group by语句联用。

COUNT
``````````
函数声明：

.. code-block:: sql

 bigint count([distict|all] value)

用途：计算记录数。

参数说明：
 - distinct|all：指明在计数时是否去除重复记录，默认是all，即计算全部记录，如果指定distinct，则可以只计算唯一值数量。
 - value：可以为任意类型，当value值为NULL时，该行不参与计算，value可以为*，当count(*)时，返回所有行数。

返回值：Bigint类型。

示例：

.. code-block:: sql

 -- 如表tbla有列col1类型为bigint
 +------+
 | COL1 |
 +------+
 | 1    |
 +------+
 | 2    |
 +------+
 | NULL |
 +------+

 select count(*) from tbla;  -- 值为3, 
 select count(col1) from tbla;  -- 值为2

聚合函数可以和group by一同使用，例如：假设存在表test_src，存在如下两列：key string类型，value double类型，

.. code-block:: sql

  -- test_src的数据为

  +-----+-------+
  | key | value | 
  +-----+-------+
  | a   | 2.0   |
  +-----+-------+
  | a   | 4.0   |
  +-----+-------+
  | b   | 1.0   |
  +-----+-------+
  | b   | 3.0   |
  +-----+-------+

  -- 此时执行如下语句，结果为：

  select key, count(value) as count from test_src group by key;


  +-----+-------+
  | key | count | 
  +-----+-------+
  | a   | 2     |
  +-----+-------+
  | b   | 2     |
  +-----+-------+

  -- 聚合函数将对相同key值得value值做聚合计算。下面介绍的其他聚合函数使用方法均与此例相同，不一一举例。

AVG
`````````
函数声明：

.. code-block:: sql

 double avg(double value)

用途：计算平均值。

参数说明：

 - value：Double类型，若输入为string或bigint会隐式转换到double类型后参与运算，其它类型抛异常。当value值为NULL时，该行不参与计算。Boolean类型不允许参与计算。

 返回值：Double类型。


示例：

.. code-block:: sql

 -- 如表tbla有一列value，类型为bigint
  
  +-------+
  | value |
  +-------+
  | 1     |
  | 2     |
  | NULL  |
  +-------+

 -- 则对该列计算avg结果为(1+2)/2=1.5

 select avg(value) as avg from tbla;

 +------+
 | avg  |
 +------+
 | 1.5  |
 +------+


MAX
``````````
函数声明：

.. code-block:: sql

 max(value)

用途：计算最大值。

参数说明：
 - value：可以为任意类型，当列中的值为NULL时，该行不参与计算。Boolean类型不允许参与运算。

返回值：与value类型相同。

示例：

.. code-block:: sql

 -- 如表tbla有一列col1，类型为bigint
 +------+
 | col1 |
 +------+
 | 1    |
 +------+
 | 2    |
 +------+
 | NULL |
 +------+

 select max(value) from tbla; -- 返回值为2


MIN
``````````````
命令格式：

.. code-block:: sql

 MIN(value)

用途：计算最小值。

参数说明：
 - value：可以为任意类型，当列中的值为NULL时，该行不参与计算。Boolean类型不允许参与计算。

示例：

.. code-block:: sql

 -- 如表tbla有一列value，类型为bigint
 +------+
 | value|
 +------+
 | 1    |
 +------+
 | 2    |
 +------+
 | NULL |
 +------+
 select min(value) from tbla; -- 返回值为1

MEDIAN
````````````
函数声明：

.. code-block:: sql

 double median(double number)

用途：计算中位数。

参数说明：
 - number：Double类型。若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。当输入值为NULL时忽略。

返回值：Double类型。


STDDEV
``````````````
函数声明：

.. code-block:: sql

 double stddev(double number)

用途：计算总体标准差。

参数说明：
 - number：Double类型。若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。当输入值为NULL时忽略。

返回值：Double类型。

STDDEV_SAMP
````````````````````
命令格式：

.. code-block:: sql

 double stddev_samp(double number)

用途：计算样本标准差。

参数说明：
  - number：Double类型。若输入为string类型或bigint类型会隐式转换到double类型后参与运算，其他类型抛异常。当输入值为NULL时忽略。

返回值：Double类型。

.. _odps_sql_aggr_sum:

SUM
``````````
函数声明：

.. code-block:: sql

 sum(value)

用途：计算汇总值。

参数说明：
  - value：Double或bigint类型，若输入为string会隐式转换到double类型后参与运算，当列中的值为NULL时，该行不参与计算。Boolean类型不允许参与计算。
 
 返回值：输入为bigint时返回bigint，输入为double或string时返回double类型。

示例：

.. code-block:: sql

 -- 如表tbla有一列value，类型为bigint
 +------+
 | value|
 +------+
 | 1    |
 +------+
 | 2    |
 +------+
 | NULL |
 +------+
 select sum(value) from tbla; -- 返回值为3

WM_CONCAT
````````````````
函数声明：

.. code-block:: sql

 string wm_concat(string separator, string str)

用途：用指定的spearator做分隔符，链接str中的值。

参数说明：
  - separator：String类型常量，分隔符。其他类型或非常量将引发异常。
  - str：String类型，若输入为bigint，double或者datetime类型会隐式转换为string后参与运算，其它类型报异常。

返回值：String类型。

.. note:: 对语句"select wm_concat(',', name) from test_src;"，若test_src为空集合，这ODPS SQL条语句返回NULL值。

其他函数
~~~~~~~~~~~~~

.. _odps_sql_function_cast:

CAST
````````
函数声明：

.. code-block:: sql

 cast(expr as <type>)

用途：将表达式的结果转换成目标类型，如cast('1' as bigint)将字符串'1'转为整数类型的1，如果转换不成功或不支持的类型转换会引发异常。

.. note::

 - cast(double as bigint)，将double值转换成bigint。
 - cast(string as bigint) 在将字符串转为bigint时，如果字符串中是以整型表达的数字，会直接转为bigint类型。如果字符串中是以浮点数或指数形式表达的数字，则会先转为double类型，再转为bigint类型。
 - cast(string as datetime) 或 cast(datetime as string)时，会采用默认的日期格式yyyy-mm-dd hh:mi:ss。


COALESCE
``````````
函数声明：

.. code-block:: sql

 coalesce(expr1, expr2, ...)

用途：返回列表中第一个非NULL的值，如果列表中所有的值都是NULL则返回NULL。

参数说明：
 - expri是要测试的值。所有这些值类型必须相同或为NULL，否则会引发异常。

返回值：返回值类型和参数类型相同。

  
.. note:: 参数至少要有一个，否则引发异常。



DECODE
`````````
函数声明：

.. code-block:: sql

 decode(expression, search, result[, search, result]...[, default])

用途：实现if-then-else分支选择的功能。

参数说明：
 - expression：要比较的表达式。
 - search：和expression进行比较的搜索项。
 - result：search和expression的值匹配时的返回值。
 - default：可选项，如果所有的搜索项都不匹配，则返回此default值，如果未指定，则会返回NULL。

返回值：返回匹配的search；如果没有匹配，返回default；如果没有指定default，返回NULL。

.. note::

   - 至少要指定三个参数。
   - 所有的result类型必须一致，或为NULL。不一致的数据类型会引发异常。所有的search和expression类型必须一致，否则报异常。
   - 如果decode中的search选项有重复时且匹配时，会返回第一个值。

示例：

.. code-block:: sql

 select  
     decode(customer_id, 
         1, 'Taobao', 
         2, 'Alipay', 
         3, 'Aliyun', 
         'Others') as result 
 from sale_detail;

上面的decode函数实现了下面if-then-else语句中的功能： 

.. code-block:: sql

  if customer_id = 1 then
    result := 'Taobao';
  elsif customer_id = 2 then
    result := 'Alipay';
  elsif customer_id = 3 then
    result := 'Aliyun';
  else
    result := 'Others';
  end if;

 
GREATEST
``````````````
函数声明：

.. code-block:: sql

 greatest(var1, var2, …)

用途：返回输入参数中最大的一个。

参数说明：
 - var1，var2可以为bigint，double，datetime或者string。若所有值都为NULL则返回NULL。

返回值：

 - 输入参数中的最大值，当不存在隐式转换时返回同输入参数类型。
 - NULL为最小值。
 - 当输入参数类型不同时，double，bigint，string之间的比较转为double；string，datetime的比较转为datetime。不允许其它的隐式转换。


ORDINAL
````````````
函数声明：

.. code-block:: sql

 ordinal(bigint nth, var1, var2, …)

用途：将输入变量按从小到大排序后，返回nth指定的位置的值。

参数说明：
 - nth：Bigint类型，指定要返回的位置，为NULL时返回NULL。
 - var1，var2：类型可以为bigint，double，datetime或者string。

返回值：
 - 排在第nth位的值，当不存在隐式转换时返回同输入参数类型。
 - 有类型转换时，double，bigint，string之间的转换返回double。string，datetime之间的转换返回datetime。不允许其它的隐式转换。
 - NULL为最小。

示例：

.. code-block:: sql 

 ordinal(3, 1, 3, 2, 5, 2, 4, 6) = 2

LEAST
`````````````
函数声明：

.. code-block:: sql

 least(var1, var2, …)

用途：返回输入参数中最小的一个。

参数说明：
 - var1，var2可以为bigint，double，datetime或者string。若所有值都为NULL则返回NULL。

返回值：
 - 输入参数中的最小值，当不存在隐式转换时返回同输入参数类型。
 - NULL为最小。
 - 有类型转换时，double，bigint，string之间的转换返回double。string，datetime之间的转换返回datetime。不允许其它的隐式类型转换。


UUID
````````````
命令格式：

.. code-block:: sql

 string uuid()

用途：返回一个随机ID，形式示例："29347a88-1e57-41ae-bb68-a9edbdd94212"。

SAMPLE
``````````````
函数声明：

.. code-block:: sql

 boolean sample(x, y, column_name)

用途：对所有读入的column_name的值，sample根据x，y的设置做采样，并过滤掉不满足采样条件的行。

参数说明：
  - x，y：Bigint类型，表示哈希为x份，取第y份。y可省略，省略时取第一份，如果省略参数中的y，则必须同时省略column_name。x，y为整型常量，大于0，其它类型或小于等于0时抛异常，若y>x也抛异常。x，y任一输入为NULL时返回NULL。
  - column_name是采样的目标列。column_name可以省略，省略时根据x，y的值随机采样。任意类型，列的值可以为NULL。不做隐式类型转换。如果column_name为常量NULL会报异常。

返回值：Boolean类型。

.. Note::  为了避免NULL值带来的数据倾斜，因此对于column_name中为NULL的值，会在x份中进行均匀哈希。如果不加column_name，则数据量比较少时输出不一定均匀，在这种情况下建议加上column_name，以获得比较好的输出结果。


示例：假定存在表tbla，表内有列名为cola的列，

.. code-block:: sql

 select * from tbla where sample (4, 1 , cola) = true;     
     -- 表示数值会根据cola hash为4份，取第1份
 select * from tbla where sample (4, 2) = true;     
     -- 表示数值会对每行数据做随机哈希分配为4份，取第2份


