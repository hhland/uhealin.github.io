Tunnel SDK 示例
=================

.. note:: 在下面的示例中，请用户注意区分ODPS及其Tunnel服务的endpoint的设置区别。详细介绍在 :ref:`odps_tunnel_sdk` 开篇中有介绍。


简单上传示例
--------------

.. code-block:: java
 :linenos:

  import java.io.IOException;
  import java.util.Date;
  
  import com.aliyun.odps.Column;
  import com.aliyun.odps.Odps;
  import com.aliyun.odps.PartitionSpec;
  import com.aliyun.odps.TableSchema;
  import com.aliyun.odps.account.Account;
  import com.aliyun.odps.account.AliyunAccount;
  import com.aliyun.odps.data.Record;
  import com.aliyun.odps.data.RecordWriter;
  import com.aliyun.odps.tunnel.DataTunnel;
  import com.aliyun.odps.tunnel.TunnelException;
  import com.aliyun.odps.tunnel.UploadSession;
  
  public class UploadSample {
          private static String accessId = "<your access id>";
          private static String accessKey = "<your access Key>";
          /*
           * Tunnel服务内网地址：http://dt-ext.odps.aliyun-inc.com
           * Tunnel服务公网地址：http://dt.odps.aliyun.com
           */
          private static String tunnelUrl = "<your tunnel endpoint>";
  
          /*
           * odps服务内网地址：http://odps-ext.aliyun-inc.com/api
           * odps服务公网地址：http://service.odps.aliyun.com/api
           */
          private static String odpsUrl = "<your odps endpoint>";

          private static String project = "<your project>";
          private static String table = "<your table name>";
          private static String partition = "<your partition spec>";
  
          public static void main(String args[]) {
                  Account account = new AliyunAccount(accessId, accessKey);
                  Odps odps = new Odps(account);
                  odps.setEndpoint(odpsUrl);
                  odps.setDefaultProject(project);
                  try {
                          DataTunnel tunnel = new DataTunnel(odps);
                          tunnel.setEndpoint(tunnelUrl);
                          PartitionSpec partitionSpec = new PartitionSpec(partition);
                          UploadSession uploadSession = tunnel.createUploadSession(project,
                                          table, partitionSpec);
  
                          System.out.println("Session Status is : "
                                          + uploadSession.getStatus().toString());
  
                          TableSchema schema = uploadSession.getSchema();
                          RecordWriter recordWriter = uploadSession.openRecordWriter(0);
                          Record record = uploadSession.newRecord();
                          for (int i = 0; i < schema.getColumns().size(); i++) {
                                  Column column = schema.getColumn(i);
                                  switch (column.getType()) {
                                  case BIGINT:
                                          record.setBigint(i, 1L);
                                          break;
                                  case BOOLEAN:
                                          record.setBoolean(i, true);
                                          break;
                                  case DATETIME:
                                          record.setDatetime(i, new Date());
                                          break;
                                  case DOUBLE:
                                          record.setDouble(i, 0.0);
                                          break;
                                  case STRING:
                                          record.setString(i, "sample");
                                          break;
                                  default:
                                          throw new RuntimeException("Unknown column type: "
                                                          + column.getType());
                                  }
                          }
                          for (int i = 0; i < 10; i++) {
                                  recordWriter.write(record);
                          }
                          recordWriter.close();
                          uploadSession.commit(new Long[]{0L});
                          System.out.println("upload success!");
  
                  } catch (TunnelException e) {
                          e.printStackTrace();
                  } catch (IOException e) {
                          e.printStackTrace();
                  }
          }
  }
  

简单下载示例
-------------

.. code-block:: java
 :linenos:

  import java.io.IOException;
  import java.util.Date;
  
  import com.aliyun.odps.Column;
  import com.aliyun.odps.Odps;
  import com.aliyun.odps.PartitionSpec;
  import com.aliyun.odps.TableSchema;
  import com.aliyun.odps.account.Account;
  import com.aliyun.odps.account.AliyunAccount;
  import com.aliyun.odps.data.Record;
  import com.aliyun.odps.data.RecordReader;
  import com.aliyun.odps.tunnel.DataTunnel;
  import com.aliyun.odps.tunnel.DownloadSession;
  import com.aliyun.odps.tunnel.TunnelException;
  
  public class DownloadSample {
          private static String accessId = "<your access id>";
          private static String accessKey = "<your access Key>";
          /*
           * Tunnel服务内网地址：http://dt-ext.odps.aliyun-inc.com
           * Tunnel服务公网地址：http://dt.odps.aliyun.com
           */
          private static String tunnelUrl = "<your tunnel endpoint>";
  
          /*
           * odps服务内网地址：http://odps-ext.aliyun-inc.com/api
           * odps服务公网地址：http://service.odps.aliyun.com/api
           */
          private static String odpsUrl = "<your odps endpoint>";

  
          private static String project = "<your project>";
          private static String table = "<your table name>";
          private static String partition = "<your partition spec>";
  
          public static void main(String args[]) {
                  Account account = new AliyunAccount(accessId, accessKey);
                  Odps odps = new Odps(account);
                  odps.setEndpoint(odpsUrl);
                  odps.setDefaultProject(project);
                  DataTunnel tunnel = new DataTunnel(odps);
                  tunnel.setEndpoint(tunnelUrl);
                  PartitionSpec partitionSpec = new PartitionSpec(partition);
                  try {
                          DownloadSession downloadSession = tunnel.createDownloadSession(project, table,
                                          partitionSpec);
                          System.out.println("Session Status is : "
                                          + downloadSession.getStatus().toString());
  
                          long count = downloadSession.getRecordCount();
                          System.out.println("RecordCount is: " + count);
  
                          RecordReader recordReader = downloadSession.openRecordReader(0,
                                          count);
                          Record record;
                          while ((record = recordReader.read()) != null) {
                                  consumeRecord(record, downloadSession.getSchema());
                          }
                          recordReader.close();
                  } catch (TunnelException e) {
                          e.printStackTrace();
                  } catch (IOException e1) {
                          e1.printStackTrace();
                  }
          }
  
          private static void consumeRecord(Record record, TableSchema schema) {
                  for (int i = 0; i < schema.getColumns().size(); i++) {
                          Column column = schema.getColumn(i);
                          String colValue = null;
                          switch (column.getType()) {
                          case BIGINT: {
                                  Long v = record.getBigint(i);
                                  colValue = v == null ? null : v.toString();
                                  break;
                          }
                          case BOOLEAN: {
                                  Boolean v = record.getBoolean(i);
                                  colValue = v == null ? null : v.toString();
                                  break;
                          }
                          case DATETIME: {
                                  Date v = record.getDatetime(i);
                                  colValue = v == null ? null : v.toString();
                                  break;
                          }
                          case DOUBLE: {
                                  Double v = record.getDouble(i);
                                  colValue = v == null ? null : v.toString();
                                  break;
                          }
                          case STRING: {
                                  String v = record.getString(i);
                                  colValue = v == null ? null : v.toString();
                                  break;
                          }
                          default:
                                  throw new RuntimeException("Unknown column type: "
                                                  + column.getType());
                          }
                          System.out.print(colValue == null ? "null" : colValue);
                          if (i != schema.getColumns().size())
                                  System.out.print("\t");
                  }
                  System.out.println();
          }
  
  }


多线程上传示例
----------------

.. code-block:: java
 :linenos:

  import java.io.IOException;
  import java.util.ArrayList;
  import java.util.Date;
  import java.util.concurrent.Callable;
  import java.util.concurrent.ExecutorService;
  import java.util.concurrent.Executors;
  
  import com.aliyun.odps.Column;
  import com.aliyun.odps.Odps;
  import com.aliyun.odps.PartitionSpec;
  import com.aliyun.odps.TableSchema;
  import com.aliyun.odps.account.Account;
  import com.aliyun.odps.account.AliyunAccount;
  import com.aliyun.odps.data.Record;
  import com.aliyun.odps.data.RecordWriter;
  import com.aliyun.odps.tunnel.DataTunnel;
  import com.aliyun.odps.tunnel.TunnelException;
  import com.aliyun.odps.tunnel.UploadSession;
  
  class UploadThread implements Callable<Boolean> {
          private long id;
          private RecordWriter recordWriter;
          private Record record;
          private TableSchema tableSchema;
  
          public UploadThread(long id, RecordWriter recordWriter, Record record,
                          TableSchema tableSchema) {
                  this.id = id;
                  this.recordWriter = recordWriter;
                  this.record = record;
                  this.tableSchema = tableSchema;
          }
  
          @Override
          public Boolean call() {
  
                  for (int i = 0; i < tableSchema.getColumns().size(); i++) {
                          Column column = tableSchema.getColumn(i);
                          switch (column.getType()) {
                          case BIGINT:
                                  record.setBigint(i, 1L);
                                  break;
                          case BOOLEAN:
                                  record.setBoolean(i, true);
                                  break;
                          case DATETIME:
                                  record.setDatetime(i, new Date());
                                  break;
                          case DOUBLE:
                                  record.setDouble(i, 0.0);
                                  break;
                          case STRING:
                                  record.setString(i, "sample");
                                  break;
                          default:
                                  throw new RuntimeException("Unknown column type: "
                                                  + column.getType());
                          }
                  }
  
                  for (int i = 0; i < 10; i++) {
                          try {
                                  recordWriter.write(record);
                                  recordWriter.close();
                          } catch (IOException e) {
                                  e.printStackTrace();
                                  return false;
                          }
                  }
                  return true;
          }
  
  }
  
  public class UploadThreadSample {
          private static String accessId = "<your access id>";
          private static String accessKey = "<your access Key>";
          /*
           * Tunnel服务内网地址：http://dt-ext.odps.aliyun-inc.com
           * Tunnel服务公网地址：http://dt.odps.aliyun.com
           */
          private static String tunnelUrl = "<your tunnel endpoint>";
  
          /*
           * odps服务内网地址：http://odps-ext.aliyun-inc.com/api
           * odps服务公网地址：http://service.odps.aliyun.com/api
           */
          private static String odpsUrl = "<your odps endpoint>";

  
          private static String project = "<your project>";
          private static String table = "<your table name>";
          private static String partition = "<your partition spec>";
  
          private static int threadNum = 10;
  
          public static void main(String args[]) {
                  Account account = new AliyunAccount(accessId, accessKey);
                  Odps odps = new Odps(account);
                  odps.setEndpoint(odpsUrl);
                  odps.setDefaultProject(project);
                  try {
                          DataTunnel tunnel = new DataTunnel(odps);
                          tunnel.setEndpoint(tunnelUrl);
                          PartitionSpec partitionSpec = new PartitionSpec(partition);
                          UploadSession uploadSession = tunnel.createUploadSession(project,
                                          table, partitionSpec);
  
                          System.out.println("Session Status is : "
                                          + uploadSession.getStatus().toString());
  
                          ExecutorService pool = Executors.newFixedThreadPool(threadNum);
                          ArrayList<Callable<Boolean>> callers = new ArrayList<Callable<Boolean>>();
                          for (int i = 0; i < threadNum; i++) {
                                  RecordWriter recordWriter = uploadSession.openRecordWriter(i);
                                  Record record = uploadSession.newRecord();
                                  callers.add(new UploadThread(i, recordWriter, record,
                                                  uploadSession.getSchema()));
                          }
  
  
                          pool.invokeAll(callers);
                          pool.shutdown();
  
                          Long[] blockList = new Long[threadNum];
                          for (int i = 0; i < threadNum; i++)
                                  blockList[i] = Long.valueOf(i);
                          uploadSession.commit(blockList);
                          System.out.println("upload success!");
  
                  } catch (TunnelException e) {
                          e.printStackTrace();
                  } catch (IOException e) {
                          e.printStackTrace();
                  } catch (InterruptedException e) {
                          e.printStackTrace();
                  }
          }
  }



多线程下载示例
----------------

.. code-block:: java
 :linenos:
  
  import java.io.IOException;
  import java.util.ArrayList;
  import java.util.Date;
  import java.util.List;
  import java.util.concurrent.Callable;
  import java.util.concurrent.ExecutionException;
  import java.util.concurrent.ExecutorService;
  import java.util.concurrent.Executors;
  import java.util.concurrent.Future;
  
  import com.aliyun.odps.Column;
  import com.aliyun.odps.Odps;
  import com.aliyun.odps.PartitionSpec;
  import com.aliyun.odps.TableSchema;
  import com.aliyun.odps.account.Account;
  import com.aliyun.odps.account.AliyunAccount;
  import com.aliyun.odps.data.Record;
  import com.aliyun.odps.data.RecordReader;
  import com.aliyun.odps.tunnel.DataTunnel;
  import com.aliyun.odps.tunnel.DownloadSession;
  import com.aliyun.odps.tunnel.TunnelException;
  
  class DownloadThread implements Callable<Long> {
          private long id;
          private RecordReader recordReader;
          private TableSchema tableSchema;
  
          public DownloadThread(int id,
                          RecordReader recordReader, TableSchema tableSchema) {
                  this.id = id;
                  this.recordReader = recordReader;
                  this.tableSchema = tableSchema;
          }
  
          @Override
          public Long call() {
                  Long recordNum = 0L;
                  try {
                          Record record;
                          while ((record = recordReader.read()) != null) {
                                  recordNum++;
                                  System.out.print("Thread " + id + "\t");
                                  consumeRecord(record, tableSchema);
                          }
                          recordReader.close();
                  } catch (IOException e) {
                          e.printStackTrace();
                  }
                  return recordNum;
          }
  
          private static void consumeRecord(Record record, TableSchema schema) {
                  for (int i = 0; i < schema.getColumns().size(); i++) {
                          Column column = schema.getColumn(i);
                          String colValue = null;
                          switch (column.getType()) {
                          case BIGINT: {
                                  Long v = record.getBigint(i);
                                  colValue = v == null ? null : v.toString();
                                  break;
                          }
                          case BOOLEAN: {
                                  Boolean v = record.getBoolean(i);
                                  colValue = v == null ? null : v.toString();
                                  break;
                          }
                          case DATETIME: {
                                  Date v = record.getDatetime(i);
                                  colValue = v == null ? null : v.toString();
                                  break;
                          }
                          case DOUBLE: {
                                  Double v = record.getDouble(i);
                                  colValue = v == null ? null : v.toString();
                                  break;
                          }
                          case STRING: {
                                  String v = record.getString(i);
                                  colValue = v == null ? null : v.toString();
                                  break;
                          }
                          default:
                                  throw new RuntimeException("Unknown column type: "
                                                  + column.getType());
                          }
                          System.out.print(colValue == null ? "null" : colValue);
                          if (i != schema.getColumns().size())
                                  System.out.print("\t");
                  }
                  System.out.println();
          }
  
  }
  
  public class DownloadThreadSample {
          private static String accessId = "<your access id>";
          private static String accessKey = "<your access Key>";
          /*
           * Tunnel服务内网地址：http://dt-ext.odps.aliyun-inc.com
           * Tunnel服务公网地址：http://dt.odps.aliyun.com
           */
          private static String tunnelUrl = "<your tunnel endpoint>";
  
          /*
           * odps服务内网地址：http://odps-ext.aliyun-inc.com/api
           * odps服务公网地址：http://service.odps.aliyun.com/api
           */
          private static String odpsUrl = "<your odps endpoint>";

  
          private static String project = "<your project>";
          private static String table = "<your table name>";
          private static String partition = "<your partition spec>";
  
          private static int threadNum = 10;
  
          public static void main(String args[]) {
                  Account account = new AliyunAccount(accessId, accessKey);
                  Odps odps = new Odps(account);
                  odps.setEndpoint(odpsUrl);
                  odps.setDefaultProject(project);
                  DataTunnel tunnel = new DataTunnel(odps);
                  tunnel.setEndpoint(tunnelUrl);
                  PartitionSpec partitionSpec = new PartitionSpec(partition);
                  DownloadSession downloadSession;
                  try {
                          downloadSession = tunnel.createDownloadSession(project, table,
                                          partitionSpec);
  
                          System.out.println("Session Status is : "
                                          + downloadSession.getStatus().toString());
  
                          long count = downloadSession.getRecordCount();
                          System.out.println("RecordCount is: " + count);
  
                          ExecutorService pool = Executors.newFixedThreadPool(threadNum);
                          ArrayList<Callable<Long>> callers = new ArrayList<Callable<Long>>();
  
                          long start = 0;
                          long step = count / threadNum;
                          for (int i = 0; i < threadNum - 1; i++) {
                                  RecordReader recordReader = downloadSession.openRecordReader(
                                                  start * i, step);
                                  callers.add(new DownloadThread( i, recordReader, downloadSession.getSchema()));
                          }
                          RecordReader recordReader = downloadSession.openRecordReader(start * (threadNum - 1), count
                                          - ((threadNum - 1) * step));
                          callers.add(new DownloadThread( threadNum - 1, recordReader, downloadSession.getSchema()));
  
                          Long downloadNum = 0L;
                          List<Future<Long>> recordNum = pool.invokeAll(callers);
                          for (Future<Long> num : recordNum)
                                  downloadNum += num.get();
                          System.out.println("Record Count is: " + downloadNum);
                          pool.shutdown();
  
                  } catch (TunnelException e) {
                          e.printStackTrace();
                  } catch (IOException e) {
                          e.printStackTrace();
                  } catch (InterruptedException e) {
                          e.printStackTrace();
                  } catch (ExecutionException e) {
                          e.printStackTrace();
                  }
          }
  }

