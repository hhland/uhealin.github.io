.. _odps_sec_authorization_dac:

项目空间的用户与授权管理
====================================================

简介
----------

本节主要介绍项目空间的用户、角色及授权管理。它主要适用于如下场景：假设用户Alice是项目空间test_project的Owner，如果有其他人需要申请访问项目空间test_project的资源，并且这个申请人是属于Alice的项目团队。那么可以采用本节介绍的方法来进行用户和授权管理。如果申请人不属于Alice的项目团队，那么建议使用跨项目空间的资源分享功能，详情请参考 :ref:`odps_sec_datasharing` 。

项目空间
--------------

项目空间(Project)是ODPS实现多租户体系的基础，是用户管理数据和计算的基本单位，也是计量和计费的主体。当用户申请创建一个项目空间之后，该用户就是这个空间的所有者(Owner)。也就是说，这个项目空间内的所有对象(eg, 表, 实例, 资源，UDF等)都属于该用户。这就是说，除了Owner之外，任何人都无权访问此项目空间内的对象，除非有Owner的授权许可。

项目空间的用户管理
-------------------
 
当项目空间的Owner Alice决定对另一个用户授权时，Alice需要先将该用户添加到自己的项目空间中来。只有添加到项目空间中的用户才能够被授权。

添加用户的命令如下：

.. code-block:: sql

 add user <username> --在项目空间中添加用户

.. note:: 云账号的<username>是在www.aliyun.com上注册过的有效邮箱地址

当一个用户离开此项目团队时，Alice需要将该用户从项目空间中移除。用户一旦从项目空间中被移除，该用户将不再拥有任何访问项目空间资源的权限。移除用户的命令如下：


.. code-block:: sql

 remove user <username> --在项目空间中移除用户

.. note::

 * 当一个用户被移除后，该用户不再拥有访问该项目空间资源的任何权限。
 * 移除一个用户之前，如果该用户已被赋予某些角色，则需要先撤销该用户的所有角色。关于角色的介绍请参考 :ref:`odps_security_role` 。
 * 当一个用户被移除后，与该用户有关的 :ref:`odps_security_acl` 和 :ref:`odps_security_policy` 仍然会被保留。一旦该用户以后被再添加到该项目空间时，该用户的历史的ACL和Policy访问权限将被重新激活。
 * ODPS目前不支持在项目空间中彻底移除一个用户及其所有权限数据。

.. _odps_security_role:
 
项目空间的角色管理
-------------------
角色(Role)是一组访问权限的集合。当需要对一组用户赋予相同的权限时，可以使用角色来授权。基于角色的授权可以大大简化授权流程，降低授权管理成本。当需要对用户授权时，应当优先考虑是否应该使用角色来完成。

每一个项目空间在创建时，会自动创建一个admin的角色，并且为该角色授予了确定的权限：能访问项目空间内的所有对象，能进行用户与角色管理，能对用户或角色进行授权。与项目空间Owner相比，admin角色不能将admin权限指派给用户，不能设定项目空间的安全配置，不能修改项目空间的鉴权模型。Admin角色所对应的权限不能被修改。

角色管理相关命令如下：

.. code-block:: sql

 create role <rolename> --创建角色
 drop role <rolename> --删除角色
 grant <rolename> to <username> --给用户指派某种角色
 revoke <rolename> from <username> --撤销角色指派

.. note:: 删除一个角色时，ODPS会检查该角色内是否还存在其他用户。若存在，则删除该角色失败。只有在该角色的所有用户都被撤销时，删除角色才会成功。

对用户或角色进行授权
---------------------

授权操作一般涉及到三个要素：主体(Subject)，客体(Object)和操作(Action)。在ODPS中，主体是指用户，客体是指项目空间中的各种类型对象，操作则与特定对象类型有关，不同类型的对象支持的操作也不尽相同。

ODPS项目空间支持如下的对象类型及操作：

+----------+------------------+--------------------------------------------------------------------+
| 对象类型 | 支持的操作       | 说明                                                               |
+==========+==================+====================================================================+
| Project  | - Read           | - 查看项目空间自身(不包括项目空间的任何对象)的信息，如CreateTime等 |
|          | - Write          | - 更新项目空间自身(不包括项目空间的任何对象)的信息，如Comments     |
|          | - List           | - 查看项目空间所有类型的对象列表                                   |
|          | - CreateTable    | - 在项目空间中创建Table                                            |
|          | - CreateInstance | - 在项目空间中创建Instance                                         |
|          | - CreateFunction | - 在项目空间中创建Function                                         |
|          | - CreateResource | - 在项目空间中创建Resource                                         |
|          | - All            | - 具备上述所有权限                                                 |
+----------+------------------+--------------------------------------------------------------------+
| Table    | - Describe       | - 读取Table的元信息                                                |
|          | - Select         | - 读取Table的数据                                                  |
|          | - Alter          | - 修改Table的元信息                                                |
|          | - Update         | - 覆盖或添加Table的数据                                            |
|          | - Drop           | - 删除Table                                                        |
|          | - All            | - 具备上述所有权限                                                 |
+----------+------------------+--------------------------------------------------------------------+
| Function | - Read           | - 读取                                                             |
|          | - Write          | - 更新                                                             |
|          | - Execute        | - 执行                                                             |
|          | - Delete         | - 删除                                                             |
|          | - All            | - 具备上述所有权限                                                 |
+----------+------------------+--------------------------------------------------------------------+
| Resource | - Read           | - 读取                                                             |
| Instance | - Write          | - 更新                                                             |
|          | - Delete         | - 删除                                                             |
|          | - All            | - 具备上述所有权限                                                 |
+----------+------------------+--------------------------------------------------------------------+

.. note:: 上述权限描述中Project类型对象的CreateTable操作，Table类型的Select、Alter、Update、Drop操作需要与Project对象的CreateInstance操作权限配合使用。单独使用上述几种权限而没有指派CreateInstance权限是无法完成对应操作的。这与ODPS的内部实现相关。类似的，Table的Select权限也要与CreateInstance权限配合使用。使用时请注意。

在添加用户或创建角色之后，需要对用户或角色进行授权。ODPS支持两种授权机制来完成对用户或角色的授权：:ref:`odps_security_acl` 和 :ref:`odps_security_policy` 。

ACL授权是一种基于对象的授权。通过ACL授权的权限数据(即访问控制列表, Access Control List)被看做是该对象的一种子资源。只有当对象已经存在时，才能进行ACL授权操作；当对象被删除时，通过ACL授权的权限数据会被自动删除。ACL授权支持类似于SQL92定义的GRANT/REVOKE语法，它通过简单的授权语句来完成对已存在的项目空间对象的授权或撤销授权。

Policy授权则是一种基于策略的授权。通过Policy授权的权限数据(即访问策略)被看做是授权主体的一种子资源。只有当主体(用户或角色)存在时，才能进行Policy授权操作；当主体被删除时，通过Policy授权的权限数据会被自动删除。Policy授权使用ODPS自定义的一种访问策略语言来进行授权，允许或禁止主体对项目空间对象的访问权限。

下面分别介绍这两种授权机制。

.. _odps_security_acl:

ACL授权
~~~~~~~~~~~~~~

这是一种比较经典的授权模型，授权简单、容易使用。ODPS支持的ACL授权方法是采用类似SQL92定义的GRANT/REVOKE语法来进行授权。ACL授权语法如下：


.. code:: sql

 grant privileges on project_object to project_subject

 revoke privileges on project_object from project_subject

 privileges ::= action_item1, action_item2, ...

 project_object ::= project project_name | table schema_name | 
                    instance inst_name | function func_name |
                    resource res_name 

 project_subject ::= user full_username | role role_name

熟悉SQL92定义的GRANT/REVOKE语法或者熟悉Oracle数据库安全管理的用户容易发现，ODPS的ACL授权语法并不支持 [WITH GRANT OPTION] 授权参数。也就是说，当用户A授权用户B访问某个对象时，用户B无法将权限进一步授权给用户C。那么，所有的授权操作都必须由具有以下三种身份之一的用户来完成：

 * 项目空间Owner
 * 项目空间中拥有admin角色的用户
 * 项目空间中对象创建者

下面给出一个简单的使用ACL授权的应用实例：

场景说明：云账号用户alice@aliyun.com和bob@aliyun.com是新加入到项目空间test_project的成员。在test_project中，他们需要提交作业、创建数据表、查看项目空间已存在的对象。

管理员执行的授权操作如下：


.. code-block:: sql

 use test_project --打开项目空间
 security 
 add user ALIYUN$alice@aliyun.com --添加用户
 add user ALIYUN$bob@aliyun.com --添加用户
 create role worker --创建角色
 grant worker TO ALIYUN$alice@aliyun.com --角色指派
 grant worker TO ALIYUN$bob@aliyun.com --角色指派
 grant CreateInstance, CreateResource, CreateFunction, CreateTable, List ON PROJECT test_project TO ROLE worker --对角色授权

.. _odps_security_policy:

Policy授权
~~~~~~~~~~~~~~

Policy授权是一种新的授权机制，它主要解决ACL授权机制无法解决的一些复杂授权场景，比如：

 * 一次操作对一组对象进行授权，如所有的函数、所有以"taobao"开头的表。
 * 带限制条件的授权，如授权只会在指定的时段内才会生效、当请求者从指定的IP地址发起请求时授权才会生效、或者只允许用户使用SQL（而不允许其它类型的Task）来访问某张表。

Policy授权机制使用访问策略语言(Access Policy)来描述授权，关于访问策略语言的详细描述，请参考如下章节：:ref:`odps_sec_accesspolicy` 。


Policy授权语句格式如下：

.. code-block:: sql

 get policy --读取项目空间的Policy
 put policy <policyFile> --设置（覆盖）项目空间的Policy
 get policy on role <roleName> --读取项目空间中某个角色的Policy
 put policy <policyFile> on role <roleName> --设置（覆盖）项目空间中某个角色的Policy

ODPS目前支持的Policy类型有Project Policy和Role Policy。Project Policy对Project中的所有用户有效，而Role Policy只对已赋予角色的用户有效。在Policy格式上，Project Policy必须指定Principal(用户)，而Role Policy则不能指定Principal(因为用户与角色的指派关系已经存在)。

下面给出一个简单的使用Project Policy授权的应用实例：

场景说明：授权用户alice@aliyun.com只能在"2013-11-11 23:59:59"这个时间点之前、只能从"10.32.180.0~23"这个IP段提交请求，只允许在项目空间test_project中执行CreateInstance, CreateTable和 List操作，禁止删除test_project下的任何表。

编写Policy如下：

.. code-block:: java 

 {
 "Version": "1",
 "Statement":
  [{
     "Effect":"Allow",
     "Principal":"ALIYUN$alice@aliyun.com",
     "Action":["odps:CreateTable","odps:CreateInstance","odps:List"],
     "Resource":"acs:odps:*:projects/test_project",
     "Condition":{
         "DateLessThan": {
             "acs:CurrentTime":"2013-11-11T23:59:59Z"
         },
         "IpAddress": {
             "acs:SourceIp":"10.32.180.0/23"
         }
     }
 },
 {
     "Effect":"Deny",
     "Principal":"ALIYUN$alice@aliyun.com",
     "Action":"odps:Drop",
     "Resource":"acs:odps:*:projects/test_project/tables/*"
 }]
 } 


.. note::

 * 目前仅支持Role Policy和Project Policy，暂不支持User Policy。
 * 每种Policy只支持一个Policy文件。
 * 请注意Put Policy操作会覆盖已有的Policy。
 * Policy语法请参考 :ref:`odps_sec_accesspolicy`。

ACL授权 V.S Policy授权
~~~~~~~~~~~~~~~~~~~~~~~~

ACL授权的特点：

#. 授权或撤销授权时，要求Grantee(如User或Role)和Object(如Table)必须已经存在。这点与Oracle授权特性相似，可以避免"删除并重建同名对象"所带来的安全风险。
#. 删除一个对象时，自动撤销与该对象关联的所有授权。
#. 仅支持Allow(白名单)授权，不支持Deny(黑名单)授权。
#. 使用经典的Grant/Revoke授权语法进行授权。语法简单，使用时不易出错。
#. 不支持带限制条件的授权。
#. 适合于简单的授权需求：授权不带限制条件，不需要Deny，并只需要对已存在对象进行授权。

Policy授权的特点：

#. 授权或撤销授权时，不关心Grantee或Object存在与否。授权对象可以支持以通配符“*”来表达，比如，"projects/tbproj/tables/taobao*"，它表示项目空间tbproj中所有以"taobao"开头的表。这点与Mysql授权特性相似，它允许对不存在的对象授权，授权者应考虑到“删除并重建同名对象”所带来的安全风险。
#. 删除一个对象时，与该对象关联的Policy授权不会被删除。
#. 同时支持Allow(白名单)和Deny(黑名单)授权。当Allow和Deny授权同时存在时，遵循Deny优先原则。
#. 支持带限制条件的授权。授权者可以对Allow或Deny授权施加条件限制(目前支持20种条件操作)。比如，允许请求者的IP为指定的IP地址范围，同时访问时间必须在2012-11-11 23:59:59之前。
#. 适合于相对复杂的授权需求：带授权限制条件，有Deny授权需求，希望支持对"未来的对象"授权。



查看权限
--------------
ODPS支持从多种维度查看权限，具体包括查看指定用户的权限、查看指定角色的权限、以及查看指定对象的授权列表。

在展现用户权限或角色权限时，ODPS使用了如下的标记字符：A、C、D、G，它们的含义如下：
 * A: 表示Allow，即允许访问。
 * D: 表示Deny，即拒绝访问。
 * C: 表示with Condition，即为带条件的授权，只出现在policy授权体系中，详细信息请参考 :ref:`odps_sec_accesspolicy_condition` 。
 * G: 表示with Grant option，即可以对object进行授权。

一个简单的展现权限的样例如下：

.. code-block:: sql

 odps@test_project> show grants for ALIYUN$odpstest1@aliyun.com

::

 [roles]
 dev

 Authorization Type: ACL
 [role/dev]
 A       projects/test_project/tables/t1: Select
 [user/odpstest1@aliyun.com]
 A       projects/test_project: CreateTable | CreateInstance | CreateFunction | List
 A       projects/test_project/tables/t1: Describe | Select

 Authorization Type: Policy
 [role/dev]
 AC      projects/test_project/tables/test_*: Describe
 DC      projects/test_project/tables/alifinance_*: Select
 [user/odpstest1@aliyun.com]
 A       projects/test_project: Create* | List
 AC      projects/test_project/tables/alipay_*: Describe | Select

 Authorization Type: ObjectCreator
 AG      projects/test_project/tables/t6: All
 AG      projects/test_project/tables/t7: All


查看指定用户的权限
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: sql

 show grants --查看当前用户自己的访问权限
 show grants for <username> --查看指定用户的访问权限，仅由ProjectOwner和Admin才能有执行权限。

查看指定角色的权限
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: sql

 describe role <rolename> --查看指定角色的访问权限角色指派

查看指定对象的授权列表
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: sql

 show acl for <objectName> [on type <objectType>] --查看指定对象上的用户和角色授权列表

.. note::

 * 当省略[on type <objectType>]时，默认的type为Table。
